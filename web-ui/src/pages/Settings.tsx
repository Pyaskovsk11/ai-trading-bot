import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { 
  Settings as SettingsIcon, 
  Save, 
  Database, 
  Shield, 
  Bell, 
  Palette,
  Send,
  Check,
  AlertTriangle,
  MessageCircle,
  Play,
  StopCircle
} from 'lucide-react';
import toast from 'react-hot-toast';

interface TradingSettings {
  profile?: string;
  ai_mode?: string;
}

interface AlertSettings {
  enabled_alerts: string[];
  whale_threshold_usd: number;
  manipulation_threshold: number;
  institutional_threshold_usd: number;
  smart_money_consensus_threshold: number;
  dedupe_window_minutes: number;
  max_alerts_per_hour: number;
  telegram_enabled: boolean;
  webhook_url?: string;
}

const Settings: React.FC = () => {
  const [activeTab, setActiveTab] = useState('trading');
  const [telegramBotToken, setTelegramBotToken] = useState('');
  const [telegramChatId, setTelegramChatId] = useState('');
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const { data: currentSettings } = useQuery<TradingSettings>({
    queryKey: ['adaptive-trading-settings'],
    queryFn: async () => {
      const response = await fetch('/api/v1/trading-settings/current');
      return response.json();
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–µ—Ä—Ç–æ–≤
  const { data: alertSettings, isLoading: alertsLoading } = useQuery<{status: string, settings: AlertSettings, service_running: boolean}>({
    queryKey: ['alert-settings'],
    queryFn: async () => {
      const response = await fetch('/api/v1/alerts/settings');
      return response.json();
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const updateProfileMutation = useMutation(
    async (profile: string) => {
      const response = await fetch('/api/v1/trading-settings/profile/' + profile, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ profile })
      });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        queryClient.invalidateQueries({ queryKey: ['adaptive-trading-settings'] });
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI —Ä–µ–∂–∏–º–∞
  const updateAIModeMutation = useMutation(
    async (mode: string) => {
      const response = await fetch('/api/v1/trading-settings/mode/' + mode, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mode })
      });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        queryClient.invalidateQueries({ queryKey: ['adaptive-trading-settings'] });
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
  const configureTelegramMutation = useMutation(
    async ({ bot_token, chat_id }: { bot_token: string; chat_id: string }) => {
      const response = await fetch('/api/v1/alerts/configure-telegram', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ bot_token, chat_id })
      });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
        queryClient.invalidateQueries({ queryKey: ['alert-settings'] });
        setTelegramBotToken('');
        setTelegramChatId('');
      },
      onError: () => {
        toast.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram');
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–µ—Ä—Ç–æ–≤
  const updateAlertSettingsMutation = useMutation(
    async (settings: Partial<AlertSettings>) => {
      const response = await fetch('/api/v1/alerts/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settings)
      });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        queryClient.invalidateQueries({ queryKey: ['alert-settings'] });
      },
      onError: () => {
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
  const sendTestAlertMutation = useMutation(
    async () => {
      const response = await fetch('/api/v1/alerts/test', {
        method: 'POST'
      });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      },
      onError: () => {
        toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞');
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞/—Å—Ç–æ–ø–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤
  const toggleAlertServiceMutation = useMutation(
    async (action: 'start' | 'stop') => {
      const response = await fetch(`/api/v1/alerts/${action}`, {
        method: 'POST'
      });
      return response.json();
    },
    {
      onSuccess: (data, variables) => {
        toast.success(variables === 'start' ? '–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!' : '–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        queryClient.invalidateQueries({ queryKey: ['alert-settings'] });
      },
      onError: () => {
        toast.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º');
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
  const enableTradingMutation = useMutation(
    async () => {
      const response = await fetch('/api/v1/trading-settings/enable', { method: 'POST' });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞');
        queryClient.invalidateQueries({ queryKey: ['adaptive-trading-settings'] });
      },
      onError: () => toast.error('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏')
    }
  );

  const disableTradingMutation = useMutation(
    async () => {
      const response = await fetch('/api/v1/trading-settings/disable', { method: 'POST' });
      return response.json();
    },
    {
      onSuccess: () => {
        toast.success('–¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞');
        queryClient.invalidateQueries({ queryKey: ['adaptive-trading-settings'] });
      },
      onError: () => toast.error('–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏')
    }
  );

  const handleToggleAlertType = (alertType: string, enabled: boolean) => {
    const currentAlerts = alertSettings?.settings?.enabled_alerts || [];
    const newAlerts = enabled 
      ? [...currentAlerts, alertType]
      : currentAlerts.filter(a => a !== alertType);
    
    updateAlertSettingsMutation.mutate({ enabled_alerts: newAlerts });
  };

  const handleUpdateThreshold = (key: keyof AlertSettings, value: number) => {
    updateAlertSettingsMutation.mutate({ [key]: value });
  };

  const tabs = [
    { id: 'trading', name: '–¢–æ—Ä–≥–æ–≤–ª—è', icon: SettingsIcon },
    { id: 'data', name: '–î–∞–Ω–Ω—ã–µ', icon: Database },
    { id: 'security', name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: Shield },
    { id: 'notifications', name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: Bell },
    { id: 'appearance', name: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥', icon: Palette },
  ];

  const alertTypes = [
    { id: 'whale_movement', name: 'üêã –î–≤–∏–∂–µ–Ω–∏—è –∫–∏—Ç–æ–≤', desc: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö' },
    { id: 'manipulation', name: 'üö® –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏', desc: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π' },
    { id: 'institutional_flow', name: 'üè¶ –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏', desc: '–î–≤–∏–∂–µ–Ω–∏—è –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤' },
    { id: 'smart_money', name: 'üß† –£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏', desc: '–°–∏–≥–Ω–∞–ª—ã –æ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤' },
    { id: 'trade_open', name: 'üíπ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π', desc: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–∫–∞—Ö' },
    { id: 'trade_close', name: 'üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π', desc: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–∫–∞—Ö' },
    { id: 'risk_alert', name: '‚ö†Ô∏è –†–∏—Å–∫–∏', desc: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö' },
  ];

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div>
        <h1 className="text-3xl font-bold gradient-text flex items-center space-x-3">
          <SettingsIcon className="w-8 h-8" />
          <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
        </h1>
        <p className="text-gray-400 mt-2">
          –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI Trading Bot –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
        <div className="lg:col-span-1">
          <div className="card p-4">
            <nav className="space-y-2">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                      activeTab === tab.id
                        ? 'bg-primary-600 text-white'
                        : 'text-gray-300 hover:bg-dark-700'
                    }`}
                  >
                    <Icon className="w-5 h-5" />
                    <span>{tab.name}</span>
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
        <div className="lg:col-span-3">
          {activeTab === 'trading' && (
            <div className="space-y-6">
              {/* –ü—Ä–æ—Ñ–∏–ª—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700 flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold">–ü—Ä–æ—Ñ–∏–ª—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏</h3>
                    <p className="text-gray-400 text-sm mt-1">
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
                    </p>
                  </div>
                  <div className="flex items-center gap-3">
                    <button
                      onClick={() => enableTradingMutation.mutate()}
                      className="btn btn-success flex items-center gap-2"
                    >
                      <Play className="w-4 h-4" /> –í–∫–ª—é—á–∏—Ç—å
                    </button>
                    <button
                      onClick={() => disableTradingMutation.mutate()}
                      className="btn btn-danger flex items-center gap-2"
                    >
                      <StopCircle className="w-4 h-4" /> –í—ã–∫–ª—é—á–∏—Ç—å
                    </button>
                  </div>
                </div>
                <div className="p-6 space-y-4">
                  {['conservative', 'moderate', 'aggressive'].map((profile) => (
                    <div key={profile} className="flex items-center space-x-3">
                      <input
                        type="radio"
                        id={profile}
                        name="profile"
                        checked={currentSettings?.profile === profile}
                        onChange={() => updateProfileMutation.mutate(profile)}
                        className="w-4 h-4 text-primary-600"
                      />
                      <label htmlFor={profile} className="flex-1">
                        <div className="font-medium capitalize">{profile}</div>
                        <div className="text-sm text-gray-400">
                          {profile === 'conservative' && '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫, –≤—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}
                          {profile === 'moderate' && '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'}
                          {profile === 'aggressive' && '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}
                        </div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              {/* AI —Ä–µ–∂–∏–º */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">AI —Ä–µ–∂–∏–º</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  {[
                    { id: 'manual', name: '–†—É—á–Ω–æ–π', desc: '–¢–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã' },
                    { id: 'semi_auto', name: '–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', desc: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤' },
                    { id: 'full_auto', name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', desc: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è' },
                    { id: 'ai_adaptive', name: 'AI-–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π', desc: '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å —Å ML' }
                  ].map((mode) => (
                    <div key={mode.id} className="flex items-center space-x-3">
                      <input
                        type="radio"
                        id={mode.id}
                        name="ai_mode"
                        checked={currentSettings?.ai_mode === mode.id}
                        onChange={() => updateAIModeMutation.mutate(mode.id)}
                        className="w-4 h-4 text-primary-600"
                      />
                      <label htmlFor={mode.id} className="flex-1">
                        <div className="font-medium">{mode.name}</div>
                        <div className="text-sm text-gray-400">{mode.desc}</div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'data' && (
            <div className="space-y-6">
              {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  {[
                    { id: 'demo', name: 'Demo –¥–∞–Ω–Ω—ã–µ', desc: '–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
                    { id: 'binance', name: 'Binance API', desc: '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Binance' },
                    { id: 'bingx', name: 'BingX API', desc: '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX' },
                    { id: 'yahoo', name: 'Yahoo Finance', desc: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Yahoo' }
                  ].map((source) => (
                    <div key={source.id} className="flex items-center space-x-3">
                      <input
                        type="radio"
                        id={source.id}
                        name="data_source"
                        className="w-4 h-4 text-primary-600"
                      />
                      <label htmlFor={source.id} className="flex-1">
                        <div className="font-medium">{source.name}</div>
                        <div className="text-sm text-gray-400">{source.desc}</div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞</div>
                      <div className="text-sm text-gray-400">–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ</div>
                    </div>
                    <select className="input">
                      <option value="300">5 –º–∏–Ω—É—Ç</option>
                      <option value="600">10 –º–∏–Ω—É—Ç</option>
                      <option value="1800">30 –º–∏–Ω—É—Ç</option>
                      <option value="3600">1 —á–∞—Å</option>
                    </select>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞</div>
                      <div className="text-sm text-gray-400">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'security' && (
            <div className="space-y-6">
              {/* API –∫–ª—é—á–∏ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">API –∫–ª—é—á–∏</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Binance API Key</label>
                    <input
                      type="password"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á"
                      className="input w-full"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Binance Secret Key</label>
                    <input
                      type="password"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
                      className="input w-full"
                    />
                  </div>
                  <div className="text-sm text-gray-400">
                    ‚ö†Ô∏è –ö–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
                  </div>
                </div>
              </div>

              {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</div>
                      <div className="text-sm text-gray-400">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</div>
                    </div>
                    <button className="btn btn-primary">–ù–∞—Å—Ç—Ä–æ–∏—Ç—å</button>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π</div>
                      <div className="text-sm text-gray-400">–ó–∞–ø–∏—Å—å –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'notifications' && (
            <div className="space-y-6">
              {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold">–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                      <p className="text-gray-400 text-sm mt-1">
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                      </p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className={`flex items-center space-x-2 text-sm ${
                        alertSettings?.service_running ? 'text-success-400' : 'text-gray-400'
                      }`}>
                        <div className={`w-2 h-2 rounded-full ${
                          alertSettings?.service_running ? 'bg-success-400 animate-pulse' : 'bg-gray-400'
                        }`}></div>
                        <span>{alertSettings?.service_running ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</span>
                      </div>
                      <button
                        onClick={() => toggleAlertServiceMutation.mutate(
                          alertSettings?.service_running ? 'stop' : 'start'
                        )}
                        disabled={toggleAlertServiceMutation.isLoading}
                        className={`btn ${alertSettings?.service_running ? 'btn-danger' : 'btn-success'} flex items-center space-x-2`}
                      >
                        {alertSettings?.service_running ? <StopCircle className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                        <span>{alertSettings?.service_running ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold flex items-center space-x-2">
                    <MessageCircle className="w-5 h-5" />
                    <span>Telegram –±–æ—Ç</span>
                  </h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  {alertSettings?.settings?.telegram_enabled ? (
                    <div className="flex items-center space-x-3 p-3 bg-success-900/20 border border-success-600/30 rounded-lg">
                      <Check className="w-5 h-5 text-success-400" />
                      <span className="text-success-400">Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω</span>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="flex items-center space-x-3 p-3 bg-warning-900/20 border border-warning-600/30 rounded-lg">
                        <AlertTriangle className="w-5 h-5 text-warning-400" />
                        <span className="text-warning-400">Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium mb-2">Bot Token</label>
                          <input
                            type="password"
                            value={telegramBotToken}
                            onChange={(e) => setTelegramBotToken(e.target.value)}
                            placeholder="1234567890:XXXXXXXXXX"
                            className="input w-full"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-2">Chat ID</label>
                          <input
                            type="text"
                            value={telegramChatId}
                            onChange={(e) => setTelegramChatId(e.target.value)}
                            placeholder="-1001234567890"
                            className="input w-full"
                          />
                        </div>
                      </div>
                      
                      <button
                        onClick={() => configureTelegramMutation.mutate({
                          bot_token: telegramBotToken,
                          chat_id: telegramChatId
                        })}
                        disabled={!telegramBotToken || !telegramChatId || configureTelegramMutation.isLoading}
                        className="btn btn-primary"
                      >
                        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram
                      </button>
                    </div>
                  )}
                  
                  {alertSettings?.settings?.telegram_enabled && (
                    <div className="flex space-x-3">
                      <button
                        onClick={() => sendTestAlertMutation.mutate()}
                        disabled={sendTestAlertMutation.isLoading}
                        className="btn btn-secondary flex items-center space-x-2"
                      >
                        <Send className="w-4 h-4" />
                        <span>–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç</span>
                      </button>
                    </div>
                  )}
                </div>
              </div>

              {/* –¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  {alertTypes.map((alertType) => (
                    <div key={alertType.id} className="flex items-center justify-between">
                      <div>
                        <div className="font-medium">{alertType.name}</div>
                        <div className="text-sm text-gray-400">{alertType.desc}</div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input 
                          type="checkbox" 
                          className="sr-only peer" 
                          checked={alertSettings?.settings?.enabled_alerts?.includes(alertType.id) || false}
                          onChange={(e) => handleToggleAlertType(alertType.id, e.target.checked)}
                        />
                        <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
                  </p>
                </div>
                <div className="p-6 space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium mb-2">–ü–æ—Ä–æ–≥ –∫–∏—Ç–æ–≤ (USD)</label>
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-400">$</span>
                        <input
                          type="number"
                          value={alertSettings?.settings?.whale_threshold_usd || 1000000}
                          onChange={(e) => handleUpdateThreshold('whale_threshold_usd', Number(e.target.value))}
                          className="input flex-1"
                          min="100000"
                          step="100000"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">–ü–æ—Ä–æ–≥ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π</label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="range"
                          min="0.1"
                          max="1.0"
                          step="0.1"
                          value={alertSettings?.settings?.manipulation_threshold || 0.3}
                          onChange={(e) => handleUpdateThreshold('manipulation_threshold', Number(e.target.value))}
                          className="flex-1"
                        />
                        <span className="text-sm font-medium w-12">
                          {Math.round((alertSettings?.settings?.manipulation_threshold || 0.3) * 100)}%
                        </span>
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">–ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (USD)</label>
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-400">$</span>
                        <input
                          type="number"
                          value={alertSettings?.settings?.institutional_threshold_usd || 5000000}
                          onChange={(e) => handleUpdateThreshold('institutional_threshold_usd', Number(e.target.value))}
                          className="input flex-1"
                          min="1000000"
                          step="1000000"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">–ö–æ–Ω—Å–µ–Ω—Å—É—Å —É–º–Ω—ã—Ö –¥–µ–Ω–µ–≥</label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="range"
                          min="0.5"
                          max="1.0"
                          step="0.1"
                          value={alertSettings?.settings?.smart_money_consensus_threshold || 0.7}
                          onChange={(e) => handleUpdateThreshold('smart_money_consensus_threshold', Number(e.target.value))}
                          className="flex-1"
                        />
                        <span className="text-sm font-medium w-12">
                          {Math.round((alertSettings?.settings?.smart_money_consensus_threshold || 0.7) * 100)}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                  <p className="text-gray-400 text-sm mt-1">
                    –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
                  </p>
                </div>
                <div className="p-6 space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">–û–∫–Ω–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (–º–∏–Ω—É—Ç—ã)</label>
                      <input
                        type="number"
                        value={alertSettings?.settings?.dedupe_window_minutes || 15}
                        onChange={(e) => handleUpdateThreshold('dedupe_window_minutes', Number(e.target.value))}
                        className="input w-full"
                        min="5"
                        max="60"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">–ú–∞–∫—Å–∏–º—É–º –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å</label>
                      <input
                        type="number"
                        value={alertSettings?.settings?.max_alerts_per_hour || 10}
                        onChange={(e) => handleUpdateThreshold('max_alerts_per_hour', Number(e.target.value))}
                        className="input w-full"
                        min="1"
                        max="50"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'appearance' && (
            <div className="space-y-6">
              {/* –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="p-4 border border-dark-600 rounded-lg cursor-pointer hover:border-primary-500 transition-colors">
                      <div className="w-full h-20 bg-dark-800 rounded mb-3"></div>
                      <div className="font-medium">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</div>
                      <div className="text-sm text-gray-400">–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞</div>
                    </div>
                    <div className="p-4 border border-dark-600 rounded-lg cursor-pointer hover:border-primary-500 transition-colors opacity-50">
                      <div className="w-full h-20 bg-gray-200 rounded mb-3"></div>
                      <div className="font-medium">–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞</div>
                      <div className="text-sm text-gray-400">–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–∞</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–ª–µ—è */}
              <div className="card">
                <div className="p-6 border-b border-dark-700">
                  <h3 className="text-lg font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–ª–µ—è</h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–ê–Ω–∏–º–∞—Ü–∏–∏</div>
                      <div className="text-sm text-gray-400">–ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º</div>
                      <div className="text-sm text-gray-400">–£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã</div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
          <div className="flex justify-end">
            <button className="btn btn-primary flex items-center space-x-2">
              <Save className="w-4 h-4" />
              <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings; 