"""
Compound Reinvestment Engine - –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
–¶–ï–õ–¨: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
"""

import logging
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import asyncio
import json

logger = logging.getLogger(__name__)

class CompoundingMode(Enum):
    """–†–µ–∂–∏–º—ã —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    CONSERVATIVE = "conservative"  # 50% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
    MODERATE = "moderate"         # 75% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
    AGGRESSIVE = "aggressive"     # 90% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
    EXTREME = "extreme"           # 100% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è

@dataclass
class CompoundingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    mode: CompoundingMode
    reinvestment_percentage: float  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    min_profit_threshold: float     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    max_position_size: float        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    profit_taking_levels: List[float]  # –£—Ä–æ–≤–Ω–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
    risk_scaling_factor: float      # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞
    compound_frequency: str         # –ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

class CompoundReinvestmentEngine:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
    """
    
    def __init__(self, mode: CompoundingMode = CompoundingMode.MODERATE):
        self.mode = mode
        self.config = self._get_compounding_config()
        self.initial_capital = 0.0
        self.current_capital = 0.0
        self.total_profit = 0.0
        self.reinvested_amount = 0.0
        self.compound_history = []
        self.position_history = []
        
        logger.info(f"Compound Reinvestment Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ {mode.value}")
    
    def _get_compounding_config(self) -> CompoundingConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        configs = {
            CompoundingMode.CONSERVATIVE: CompoundingConfig(
                mode=CompoundingMode.CONSERVATIVE,
                reinvestment_percentage=0.50,  # 50% –ø—Ä–∏–±—ã–ª–∏
                min_profit_threshold=0.02,     # 2% –º–∏–Ω–∏–º—É–º
                max_position_size=0.30,        # 30% –º–∞–∫—Å–∏–º—É–º
                profit_taking_levels=[0.10, 0.25, 0.50],  # 10%, 25%, 50%
                risk_scaling_factor=0.8,       # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                compound_frequency="daily"
            ),
            CompoundingMode.MODERATE: CompoundingConfig(
                mode=CompoundingMode.MODERATE,
                reinvestment_percentage=0.75,  # 75% –ø—Ä–∏–±—ã–ª–∏
                min_profit_threshold=0.015,    # 1.5% –º–∏–Ω–∏–º—É–º
                max_position_size=0.50,        # 50% –º–∞–∫—Å–∏–º—É–º
                profit_taking_levels=[0.15, 0.35, 0.75],  # 15%, 35%, 75%
                risk_scaling_factor=1.0,       # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                compound_frequency="trade"
            ),
            CompoundingMode.AGGRESSIVE: CompoundingConfig(
                mode=CompoundingMode.AGGRESSIVE,
                reinvestment_percentage=0.90,  # 90% –ø—Ä–∏–±—ã–ª–∏
                min_profit_threshold=0.01,     # 1% –º–∏–Ω–∏–º—É–º
                max_position_size=0.70,        # 70% –º–∞–∫—Å–∏–º—É–º
                profit_taking_levels=[0.20, 0.50, 1.00],  # 20%, 50%, 100%
                risk_scaling_factor=1.2,       # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                compound_frequency="immediate"
            ),
            CompoundingMode.EXTREME: CompoundingConfig(
                mode=CompoundingMode.EXTREME,
                reinvestment_percentage=1.00,  # 100% –ø—Ä–∏–±—ã–ª–∏
                min_profit_threshold=0.005,    # 0.5% –º–∏–Ω–∏–º—É–º
                max_position_size=0.90,        # 90% –º–∞–∫—Å–∏–º—É–º
                profit_taking_levels=[0.25, 0.75, 1.50],  # 25%, 75%, 150%
                risk_scaling_factor=1.5,       # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                compound_frequency="immediate"
            )
        }
        return configs[self.mode]
    
    def initialize_capital(self, initial_amount: float):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        self.initial_capital = initial_amount
        self.current_capital = initial_amount
        self.total_profit = 0.0
        self.reinvested_amount = 0.0
        self.compound_history = []
        self.position_history = []
        
        logger.info(f"–ö–∞–ø–∏—Ç–∞–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${initial_amount:,.2f}")
    
    def calculate_position_size(self, signal_confidence: float, market_volatility: float = 0.02) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            base_size = min(signal_confidence * 0.5, self.config.max_position_size)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
            growth_factor = self.current_capital / self.initial_capital if self.initial_capital > 0 else 1.0
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Ç–∞ (–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)
            growth_multiplier = min(1.0 + np.log(growth_factor) * 0.2, 2.0)  # –ú–∞–∫—Å–∏–º—É–º 2x
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility_adjustment = max(0.5, 1.0 - market_volatility * 5)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = base_size * growth_multiplier * volatility_adjustment * self.config.risk_scaling_factor
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            position_size = max(0.01, min(position_size, self.config.max_position_size))
            
            logger.debug(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.3f} (—Ä–æ—Å—Ç: {growth_factor:.2f}x, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_confidence:.3f})")
            
            return position_size
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.05  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5%
    
    def process_trade_result(self, trade_result: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            profit_loss = trade_result.get('profit_loss', 0.0)
            trade_return_pct = trade_result.get('return_pct', 0.0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª
            old_capital = self.current_capital
            self.current_capital += profit_loss
            
            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
            if profit_loss > 0 and trade_return_pct >= self.config.min_profit_threshold:
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                reinvestment_amount = profit_loss * self.config.reinvestment_percentage
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_profit += profit_loss
                self.reinvested_amount += reinvestment_amount
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                compound_record = {
                    'timestamp': datetime.now(),
                    'trade_profit': profit_loss,
                    'reinvestment_amount': reinvestment_amount,
                    'old_capital': old_capital,
                    'new_capital': self.current_capital,
                    'growth_factor': self.current_capital / self.initial_capital,
                    'total_return_pct': (self.current_capital - self.initial_capital) / self.initial_capital * 100,
                    'compound_effect': reinvestment_amount / self.initial_capital * 100
                }
                
                self.compound_history.append(compound_record)
                
                logger.info(f"üí∞ –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${reinvestment_amount:,.2f} ({self.config.reinvestment_percentage:.0%} –æ—Ç ${profit_loss:,.2f})")
                logger.info(f"üìà –ö–∞–ø–∏—Ç–∞–ª: ${old_capital:,.2f} ‚Üí ${self.current_capital:,.2f} ({compound_record['total_return_pct']:.2f}%)")
                
                return {
                    'reinvested': True,
                    'reinvestment_amount': reinvestment_amount,
                    'new_capital': self.current_capital,
                    'growth_factor': compound_record['growth_factor'],
                    'total_return_pct': compound_record['total_return_pct'],
                    'compound_effect': compound_record['compound_effect']
                }
            
            else:
                # –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
                logger.debug(f"–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –ø—Ä–∏–±—ã–ª—å ${profit_loss:.2f}, –ø–æ—Ä–æ–≥ {self.config.min_profit_threshold:.1%}")
                
                return {
                    'reinvested': False,
                    'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å' if profit_loss > 0 else '–£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞',
                    'new_capital': self.current_capital,
                    'growth_factor': self.current_capital / self.initial_capital,
                    'total_return_pct': (self.current_capital - self.initial_capital) / self.initial_capital * 100
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏: {e}")
            return {'reinvested': False, 'error': str(e)}
    
    def calculate_profit_taking_levels(self, entry_price: float, signal_direction: str) -> List[float]:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            base_levels = self.config.profit_taking_levels.copy()
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–ª–µ–π
            growth_factor = self.current_capital / self.initial_capital if self.initial_capital > 0 else 1.0
            growth_multiplier = 1.0 + min(np.log(growth_factor) * 0.1, 0.5)  # –ú–∞–∫—Å–∏–º—É–º +50%
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏
            adjusted_levels = [level * growth_multiplier for level in base_levels]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            if signal_direction == 'buy':
                profit_prices = [entry_price * (1 + level) for level in adjusted_levels]
            else:  # sell
                profit_prices = [entry_price * (1 - level) for level in adjusted_levels]
            
            logger.debug(f"–£—Ä–æ–≤–Ω–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏: {[f'{level:.1%}' for level in adjusted_levels]}")
            
            return profit_prices
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏: {e}")
            return [entry_price * 1.1, entry_price * 1.2, entry_price * 1.3]  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    
    def get_compound_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if self.initial_capital == 0:
                return {'error': '–ö–∞–ø–∏—Ç–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            total_return_pct = (self.current_capital - self.initial_capital) / self.initial_capital * 100
            compound_effect = self.reinvested_amount / self.initial_capital * 100
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            growth_analysis = self._analyze_growth_periods()
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
            target_projection = self._project_target_achievement()
            
            return {
                'initial_capital': self.initial_capital,
                'current_capital': self.current_capital,
                'total_profit': self.total_profit,
                'reinvested_amount': self.reinvested_amount,
                'total_return_pct': total_return_pct,
                'compound_effect_pct': compound_effect,
                'growth_factor': self.current_capital / self.initial_capital,
                'compounding_mode': self.mode.value,
                'reinvestment_rate': self.config.reinvestment_percentage,
                'trades_processed': len(self.compound_history),
                'growth_analysis': growth_analysis,
                'target_projection': target_projection,
                'performance_metrics': self._calculate_performance_metrics()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def _analyze_growth_periods(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
        try:
            if len(self.compound_history) < 2:
                return {'insufficient_data': True}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_growth = {}
            for record in self.compound_history:
                date = record['timestamp'].date()
                if date not in daily_growth:
                    daily_growth[date] = []
                daily_growth[date].append(record['compound_effect'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            daily_returns = [sum(effects) for effects in daily_growth.values()]
            
            return {
                'daily_compound_avg': np.mean(daily_returns) if daily_returns else 0,
                'daily_compound_std': np.std(daily_returns) if len(daily_returns) > 1 else 0,
                'best_day': max(daily_returns) if daily_returns else 0,
                'worst_day': min(daily_returns) if daily_returns else 0,
                'positive_days': sum(1 for r in daily_returns if r > 0),
                'total_days': len(daily_returns),
                'consistency_ratio': sum(1 for r in daily_returns if r > 0) / len(daily_returns) if daily_returns else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _project_target_achievement(self, target_return: float = 1.0) -> Dict:
        """–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        try:
            current_return = (self.current_capital - self.initial_capital) / self.initial_capital
            
            if current_return >= target_return:
                return {
                    'target_achieved': True,
                    'current_progress': current_return,
                    'target': target_return,
                    'excess_return': current_return - target_return
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
            if len(self.compound_history) < 2:
                return {'insufficient_data': True}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
            recent_records = self.compound_history[-10:]
            time_span = (recent_records[-1]['timestamp'] - recent_records[0]['timestamp']).total_seconds() / 86400  # –¥–Ω–∏
            
            if time_span > 0:
                growth_rate_per_day = (recent_records[-1]['growth_factor'] - recent_records[0]['growth_factor']) / time_span
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                remaining_growth = (1 + target_return) - (self.current_capital / self.initial_capital)
                days_to_target = remaining_growth / growth_rate_per_day if growth_rate_per_day > 0 else float('inf')
                
                return {
                    'target_achieved': False,
                    'current_progress': current_return,
                    'target': target_return,
                    'remaining_return': target_return - current_return,
                    'growth_rate_per_day': growth_rate_per_day,
                    'estimated_days_to_target': min(days_to_target, 365),  # –ú–∞–∫—Å–∏–º—É–º –≥–æ–¥
                    'probability_assessment': self._assess_achievement_probability(growth_rate_per_day, target_return - current_return)
                }
            
            return {'insufficient_data': True}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return {'error': str(e)}
    
    def _assess_achievement_probability(self, growth_rate: float, remaining_return: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
        try:
            if growth_rate <= 0:
                return "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)"
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
            days_needed = remaining_return / growth_rate
            
            if days_needed <= 7:
                return "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (–º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏)"
            elif days_needed <= 30:
                return "–í—ã—Å–æ–∫–∞—è (–º–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞)"
            elif days_needed <= 90:
                return "–°—Ä–µ–¥–Ω—è—è (2-3 –º–µ—Å—è—Ü–∞)"
            elif days_needed <= 180:
                return "–ù–∏–∑–∫–∞—è (4-6 –º–µ—Å—è—Ü–µ–≤)"
            else:
                return "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (–±–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}"
    
    def _calculate_performance_metrics(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if len(self.compound_history) < 2:
                return {'insufficient_data': True}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            returns = [record['compound_effect'] / 100 for record in self.compound_history]  # –í –¥–æ–ª—è—Ö
            growth_factors = [record['growth_factor'] for record in self.compound_history]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_return = growth_factors[-1] - 1 if growth_factors else 0
            avg_return = np.mean(returns) if returns else 0
            volatility = np.std(returns) if len(returns) > 1 else 0
            
            # Sharpe Ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            sharpe_ratio = avg_return / volatility if volatility > 0 else 0
            
            # Maximum Drawdown
            peak = growth_factors[0]
            max_drawdown = 0
            for gf in growth_factors:
                if gf > peak:
                    peak = gf
                drawdown = (peak - gf) / peak
                max_drawdown = max(max_drawdown, drawdown)
            
            # Win Rate
            positive_returns = sum(1 for r in returns if r > 0)
            win_rate = positive_returns / len(returns) if returns else 0
            
            return {
                'total_return': total_return,
                'average_compound_return': avg_return,
                'volatility': volatility,
                'sharpe_ratio': sharpe_ratio,
                'max_drawdown': max_drawdown,
                'win_rate': win_rate,
                'total_trades': len(returns),
                'compound_frequency': self.config.compound_frequency
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return {'error': str(e)}
    
    def optimize_compounding_strategy(self) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            stats = self.get_compound_statistics()
            
            if 'error' in stats:
                return stats
            
            current_performance = stats.get('performance_metrics', {})
            
            recommendations = []
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞
            win_rate = current_performance.get('win_rate', 0)
            if win_rate < 0.4:
                recommendations.append("–°–Ω–∏–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞")
            elif win_rate > 0.7:
                recommendations.append("–ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = current_performance.get('volatility', 0)
            if volatility > 0.1:  # 10%
                recommendations.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–∞–¥–∫–∏
            max_drawdown = current_performance.get('max_drawdown', 0)
            if max_drawdown > 0.3:  # 30%
                recommendations.append("–ë–æ–ª—å—à–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ - —É—Å–∏–ª–∏—Ç—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
            growth_factor = stats.get('growth_factor', 1)
            if growth_factor > 1.5:  # 50% —Ä–æ—Å—Ç
                recommendations.append("–û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π")
            
            return {
                'current_mode': self.mode.value,
                'performance_score': self._calculate_performance_score(current_performance),
                'recommendations': recommendations,
                'suggested_mode': self._suggest_optimal_mode(current_performance),
                'optimization_potential': self._estimate_optimization_potential(stats)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {'error': str(e)}
    
    def _calculate_performance_score(self, metrics: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not metrics or 'error' in metrics:
                return 0.0
            
            # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            weights = {
                'total_return': 0.3,
                'win_rate': 0.25,
                'sharpe_ratio': 0.2,
                'max_drawdown': -0.25  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏
            }
            
            score = 0
            for metric, weight in weights.items():
                value = metrics.get(metric, 0)
                if metric == 'max_drawdown':
                    score += weight * value  # –£–∂–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å
                else:
                    score += weight * min(value, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
            
            return max(0, min(1, score))  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–∞: {e}")
            return 0.0
    
    def _suggest_optimal_mode(self, metrics: Dict) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            win_rate = metrics.get('win_rate', 0)
            volatility = metrics.get('volatility', 0)
            max_drawdown = metrics.get('max_drawdown', 0)
            
            # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
            if win_rate > 0.7 and volatility < 0.05 and max_drawdown < 0.2:
                return CompoundingMode.EXTREME.value
            elif win_rate > 0.6 and volatility < 0.08 and max_drawdown < 0.3:
                return CompoundingMode.AGGRESSIVE.value
            elif win_rate > 0.5 and volatility < 0.12:
                return CompoundingMode.MODERATE.value
            else:
                return CompoundingMode.CONSERVATIVE.value
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return CompoundingMode.CONSERVATIVE.value
    
    def _estimate_optimization_potential(self, stats: Dict) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            current_return = stats.get('total_return_pct', 0)
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            if current_return < 10:
                potential = "–í—ã—Å–æ–∫–∏–π"
                description = "–ú–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
            elif current_return < 50:
                potential = "–°—Ä–µ–¥–Ω–∏–π"
                description = "–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            elif current_return < 100:
                potential = "–ù–∏–∑–∫–∏–π"
                description = "–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã"
            else:
                potential = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π"
                description = "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
            
            return {
                'level': potential,
                'description': description,
                'estimated_improvement': max(0, 100 - current_return) * 0.1  # 10% –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞: {e}")
            return {'level': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'description': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
conservative_compounder = CompoundReinvestmentEngine(CompoundingMode.CONSERVATIVE)
moderate_compounder = CompoundReinvestmentEngine(CompoundingMode.MODERATE)
aggressive_compounder = CompoundReinvestmentEngine(CompoundingMode.AGGRESSIVE)
extreme_compounder = CompoundReinvestmentEngine(CompoundingMode.EXTREME) 