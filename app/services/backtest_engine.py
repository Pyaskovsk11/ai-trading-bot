"""
BacktestEngine - –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å TradingStrategyManager –∏ AdvancedRiskManager
"""

import logging
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum
import asyncio
import json

from .trading_strategy_manager import TradingStrategyManager, StrategyConfig, StrategyType
from .advanced_risk_manager import AdvancedRiskManager, MarketRegime
from .adaptive_trading_service import AggressivenessProfile, AIMode
from .bingx_historical_data_service import bingx_historical_service

logger = logging.getLogger(__name__)

class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    MARKET = "market"
    LIMIT = "limit"
    STOP_LOSS = "stop_loss"
    TAKE_PROFIT = "take_profit"

class TradeStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫"""
    OPEN = "open"
    CLOSED = "closed"
    CANCELLED = "cancelled"

@dataclass
class BacktestTrade:
    """–°–¥–µ–ª–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    id: int
    symbol: str
    side: str  # 'buy' or 'sell'
    entry_time: datetime
    entry_price: float
    quantity: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    pnl: float = 0.0
    pnl_pct: float = 0.0
    commission: float = 0.0
    status: TradeStatus = TradeStatus.OPEN
    strategy_type: str = ""
    confidence: float = 0.0
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    exit_reason: str = ""

@dataclass
class BacktestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_return: float
    total_return_pct: float
    sharpe_ratio: float
    sortino_ratio: float
    calmar_ratio: float
    max_drawdown: float
    max_drawdown_pct: float
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    profit_factor: float
    avg_win: float
    avg_loss: float
    largest_win: float
    largest_loss: float
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_trade_duration: float
    max_trade_duration: float
    min_trade_duration: float
    
    # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
    var_95: float
    var_99: float
    expected_shortfall: float
    volatility: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    recovery_factor: float
    ulcer_index: float
    sterling_ratio: float

@dataclass
class BacktestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    initial_capital: float = 100000.0
    commission_rate: float = 0.001  # 0.1%
    slippage_rate: float = 0.0005   # 0.05%
    max_positions: int = 10
    position_sizing_method: str = "fixed_amount"  # fixed_amount, fixed_pct, risk_based
    position_size: float = 0.02  # 2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    use_stop_loss: bool = True
    use_take_profit: bool = True
    max_trade_duration: int = 24  # —á–∞—Å–æ–≤
    risk_free_rate: float = 0.02  # 2% –≥–æ–¥–æ–≤—ã—Ö

class BacktestEngine:
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, config: BacktestConfig = None):
        self.config = config or BacktestConfig()
        self.strategy_manager = TradingStrategyManager()
        self.risk_manager = AdvancedRiskManager(self.config.initial_capital)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞
        self.current_capital = self.config.initial_capital
        self.peak_capital = self.config.initial_capital
        self.trades: List[BacktestTrade] = []
        self.open_positions: Dict[str, BacktestTrade] = {}
        self.equity_curve: List[Dict] = []
        self.trade_counter = 0
        
        logger.info("BacktestEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def run_backtest(self, 
                          strategy_config: StrategyConfig,
                          symbols: List[str],
                          start_date: datetime,
                          end_date: datetime,
                          timeframe: str = "1h") -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, "
                       f"{start_date.date()} - {end_date.date()}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._initialize_backtest(strategy_config)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await self._generate_historical_data(symbols, start_date, end_date, timeframe)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
            await self._run_backtest_loop(historical_data, symbols, timeframe)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await self._close_all_positions(end_date)
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = await self._calculate_metrics()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                'config': asdict(self.config),
                'strategy_config': strategy_config.get_current_config() if hasattr(strategy_config, 'get_current_config') else {},
                'period': {
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat(),
                    'duration_days': (end_date - start_date).days
                },
                'symbols': symbols,
                'metrics': asdict(metrics),
                'trades': [asdict(trade) for trade in self.trades],
                'equity_curve': self.equity_curve,
                'summary': self._generate_summary(metrics)
            }
            
            logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {metrics.total_trades} —Å–¥–µ–ª–æ–∫, "
                       f"–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}%")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
            raise
    
    async def _initialize_backtest(self, strategy_config: StrategyConfig):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        await self.strategy_manager.initialize()
        self.strategy_manager.set_strategy_config(strategy_config)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_capital = self.config.initial_capital
        self.peak_capital = self.config.initial_capital
        self.trades.clear()
        self.open_positions.clear()
        self.equity_curve.clear()
        self.trade_counter = 0
        
        logger.info(f"–ë—ç–∫—Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –∫–∞–ø–∏—Ç–∞–ª ${self.config.initial_capital:,.0f}")
    
    async def _generate_historical_data(self, 
                                      symbols: List[str], 
                                      start_date: datetime, 
                                      end_date: datetime, 
                                      timeframe: str) -> Dict[str, pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö)"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
        logger.info(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BingX Historical Data Service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await bingx_historical_service.get_multiple_symbols_data(
                symbols, start_date, end_date, timeframe
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            for symbol, data in historical_data.items():
                if len(data) > 0:
                    logger.info(f"‚úÖ {symbol}: {len(data)} —Å–≤–µ—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            return historical_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.warning("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
            # Fallback –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = {}
            for symbol in symbols:
                data = await self._generate_synthetic_data(symbol, start_date, end_date, timeframe)
                historical_data[symbol] = data
                
            logger.info(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            return historical_data
    
    async def _generate_synthetic_data(self, 
                                     symbol: str, 
                                     start_date: datetime, 
                                     end_date: datetime, 
                                     timeframe: str) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É
        freq_map = {
            '1m': '1T', '5m': '5T', '15m': '15T', '30m': '30T',
            '1h': '1H', '4h': '4H', '1d': '1D'
        }
        freq = freq_map.get(timeframe, '1H')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        dates = pd.date_range(start=start_date, end=end_date, freq=freq)
        periods = len(dates)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–º–≤–æ–ª–∞)
        base_prices = {
            'BTCUSDT': 50000, 'ETHUSDT': 3000, 'ADAUSDT': 1.5,
            'BNBUSDT': 400, 'SOLUSDT': 100, 'XRPUSDT': 0.6
        }
        base_price = base_prices.get(symbol, 1000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
        np.random.seed(hash(symbol) % 2**32)  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥
        trend = np.linspace(0, 0.2, periods)  # 20% —Ä–æ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = 0.02  # 2% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        returns = np.random.normal(0, volatility, periods)
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤–æ–π —Ä—è–¥
        log_prices = np.log(base_price) + trend + np.cumsum(returns)
        prices = np.exp(log_prices)
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'high': prices * (1 + np.abs(np.random.normal(0, 0.01, periods))),
            'low': prices * (1 - np.abs(np.random.normal(0, 0.01, periods))),
            'close': prices,
            'volume': np.random.uniform(1000000, 5000000, periods)
        })
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
        df['high'] = np.maximum(df['high'], np.maximum(df['open'], df['close']))
        df['low'] = np.minimum(df['low'], np.minimum(df['open'], df['close']))
        
        df.set_index('timestamp', inplace=True)
        return df
    
    async def _run_backtest_loop(self, 
                               historical_data: Dict[str, pd.DataFrame], 
                               symbols: List[str], 
                               timeframe: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        all_timestamps = set()
        for data in historical_data.values():
            all_timestamps.update(data.index)
        
        timestamps = sorted(all_timestamps)
        
        for i, timestamp in enumerate(timestamps):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            current_prices = {}
            for symbol in symbols:
                if timestamp in historical_data[symbol].index:
                    current_prices[symbol] = historical_data[symbol].loc[timestamp, 'close']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            await self._update_portfolio_value(current_prices, timestamp)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
            await self._check_exit_conditions(current_prices, timestamp)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            if i % 1 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –ö–ê–ñ–î–´–ô –±–∞—Ä (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞)
                await self._process_signals(symbols, current_prices, timestamp, timeframe)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if i % 10 == 0:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 10 –±–∞—Ä–æ–≤
                self._record_equity_point(timestamp, current_prices)
    
    async def _process_signals(self, 
                             symbols: List[str], 
                             current_prices: Dict[str, float], 
                             timestamp: datetime, 
                             timeframe: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        for symbol in symbols:
            if symbol not in current_prices:
                continue
                
            try:
                # –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–º–µ—Å—Ç–æ ML
                # –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ
                signal = await self._generate_simple_signal(symbol, current_prices[symbol], timestamp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
                if signal and signal.get('should_execute', False) and signal.get('signal') in ['buy', 'sell']:
                    await self._execute_entry(symbol, signal, current_prices[symbol], timestamp)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
    
    async def _generate_simple_signal(self, symbol: str, price: float, timestamp: datetime) -> Dict:
        """
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è PnL
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            historical_data = await self._get_recent_data_for_analysis(symbol, timestamp)
            
            if len(historical_data) < 50:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                return self._create_hold_signal("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_technical_indicators(historical_data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            market_regime = self._detect_market_regime(historical_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            signal_data = self._analyze_multi_indicator_signal(indicators, market_regime, price, timestamp)
            
            return signal_data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return self._create_hold_signal(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    async def _get_recent_data_for_analysis(self, symbol: str, timestamp: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            if isinstance(timestamp, (int, float)):
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
            elif isinstance(timestamp, pd.Timestamp):
                timestamp = timestamp.to_pydatetime()
            elif not isinstance(timestamp, datetime):
                timestamp = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —á–∞—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            periods = 100
            start_time = timestamp - timedelta(hours=periods)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = await bingx_historical_service.get_historical_data(
                symbol, start_time, timestamp, "1h"
            )
            
            if len(data) >= 50:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {len(data)} —Å–≤–µ—á–µ–π")
                return data
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ")
                
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        
        # Fallback –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        return await self._generate_synthetic_analysis_data(symbol, timestamp)
    
    async def _generate_synthetic_analysis_data(self, symbol: str, timestamp: datetime) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        periods = 100
        start_time = timestamp - timedelta(hours=periods)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        dates = pd.date_range(start=start_time, end=timestamp, freq='1H')
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        base_prices = {
            'BTCUSDT': 50000, 'ETHUSDT': 3000, 'ADAUSDT': 1.5,
            'BNBUSDT': 400, 'SOLUSDT': 100, 'XRPUSDT': 0.6
        }
        base_price = base_prices.get(symbol, 1000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        np.random.seed(hash(f"{symbol}_{timestamp.hour}") % 2**32)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        trend_strength = 0.002  # 0.2% —Ç—Ä–µ–Ω–¥ –∑–∞ —á–∞—Å
        trend_direction = 1 if (timestamp.hour % 12) < 6 else -1  # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        
        prices = []
        current_price = base_price
        
        for i in range(len(dates)):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            trend_component = trend_direction * trend_strength * current_price
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = np.random.normal(0, 0.01) * current_price  # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            cycle_component = 0.005 * current_price * np.sin(i * 0.1)
            
            current_price += trend_component + volatility + cycle_component
            prices.append(current_price)
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'close': prices,
            'volume': np.random.uniform(1000000, 5000000, len(dates))
        })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º high/low –Ω–∞ –æ—Å–Ω–æ–≤–µ close
        df['high'] = df['close'] * (1 + np.abs(np.random.normal(0, 0.005, len(df))))
        df['low'] = df['close'] * (1 - np.abs(np.random.normal(0, 0.005, len(df))))
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
        df['high'] = np.maximum(df['high'], np.maximum(df['open'], df['close']))
        df['low'] = np.minimum(df['low'], np.minimum(df['open'], df['close']))
        
        return df
    
    def _calculate_technical_indicators(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        indicators['rsi'] = 100 - (100 / (1 + rs)).iloc[-1]
        
        # MACD
        ema_12 = df['close'].ewm(span=12).mean()
        ema_26 = df['close'].ewm(span=26).mean()
        macd = ema_12 - ema_26
        macd_signal = macd.ewm(span=9).mean()
        indicators['macd'] = macd.iloc[-1]
        indicators['macd_signal'] = macd_signal.iloc[-1]
        indicators['macd_histogram'] = (macd - macd_signal).iloc[-1]
        
        # Bollinger Bands
        bb_middle = df['close'].rolling(20).mean()
        bb_std = df['close'].rolling(20).std()
        bb_upper = bb_middle + (bb_std * 2)
        bb_lower = bb_middle - (bb_std * 2)
        indicators['bb_position'] = ((df['close'].iloc[-1] - bb_lower.iloc[-1]) / 
                                   (bb_upper.iloc[-1] - bb_lower.iloc[-1]))
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        indicators['sma_20'] = df['close'].rolling(20).mean().iloc[-1]
        indicators['sma_50'] = df['close'].rolling(50).mean().iloc[-1]
        indicators['ema_12'] = ema_12.iloc[-1]
        indicators['ema_26'] = ema_26.iloc[-1]
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        indicators['volume_sma'] = df['volume'].rolling(20).mean().iloc[-1]
        indicators['volume_ratio'] = df['volume'].iloc[-1] / indicators['volume_sma']
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        indicators['volatility'] = df['close'].pct_change().rolling(20).std().iloc[-1]
        
        # –¶–µ–Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        indicators['price_change_1h'] = (df['close'].iloc[-1] - df['close'].iloc[-2]) / df['close'].iloc[-2]
        indicators['price_change_4h'] = (df['close'].iloc[-1] - df['close'].iloc[-5]) / df['close'].iloc[-5] if len(df) >= 5 else 0
        indicators['price_change_24h'] = (df['close'].iloc[-1] - df['close'].iloc[-25]) / df['close'].iloc[-25] if len(df) >= 25 else 0
        
        return indicators
    
    def _detect_market_regime(self, df: pd.DataFrame) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if len(df) < 50:
            return 'sideways'
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        sma_20 = df['close'].rolling(20).mean().iloc[-1]
        sma_50 = df['close'].rolling(50).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = df['close'].pct_change().rolling(20).std().iloc[-1]
        
        if current_price > sma_20 > sma_50 and volatility < 0.03:
            return 'bull_trend'
        elif current_price < sma_20 < sma_50 and volatility < 0.03:
            return 'bear_trend'
        elif volatility > 0.05:
            return 'high_volatility'
        else:
            return 'sideways'
    
    def _analyze_multi_indicator_signal(self, indicators: Dict, market_regime: str, price: float, timestamp: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        buy_score = 0
        sell_score = 0
        confidence_factors = []
        signal_type = 'hold'
        
        # –§–ò–õ–¨–¢–† –ö–ê–ß–ï–°–¢–í–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
        volatility = indicators.get('volatility', 0.02)
        volume_ratio = indicators.get('volume_ratio', 1.0)
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–ª–æ—Ö–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã)
        if volatility > 0.12:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.08 –¥–æ 0.12 - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            return self._create_hold_signal("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        if volume_ratio < 0.2:  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.3 –¥–æ 0.2 - –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
            return self._create_hold_signal("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
        
        # –í–†–ï–ú–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†: –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        hour = timestamp.hour if hasattr(timestamp, 'hour') else datetime.now().hour
        is_low_activity = hour in [0, 1, 2, 3, 4, 5, 6]  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã UTC
        
        # RSI –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ü–û–†–û–ì–ò
        rsi = indicators.get('rsi', 50)
        if rsi < 30:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            buy_score += 30
            confidence_factors.append(f"RSI —Å–∏–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π ({rsi:.1f}) - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        elif rsi < 40:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            buy_score += 15
            confidence_factors.append(f"RSI –Ω–∏–∑–∫–∏–π ({rsi:.1f}) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏")
        elif rsi > 70:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            sell_score += 30
            confidence_factors.append(f"RSI —Å–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π ({rsi:.1f}) - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        elif rsi > 60:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            sell_score += 15
            confidence_factors.append(f"RSI –≤—ã—Å–æ–∫–∏–π ({rsi:.1f}) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
        
        # MACD –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        
        # –°–∏–ª—å–Ω—ã–µ MACD —Å–∏–≥–Ω–∞–ª—ã
        if macd > macd_signal and macd_histogram > 0:
            buy_score += 25
            confidence_factors.append("MACD —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd < macd_signal and macd_histogram < 0:
            sell_score += 25
            confidence_factors.append("MACD —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd > macd_signal:
            buy_score += 12
            confidence_factors.append("MACD —É–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd < macd_signal:
            sell_score += 12
            confidence_factors.append("MACD —É–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        
        # Bollinger Bands - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        bb_position = indicators.get('bb_position', 0.5)
        if bb_position < 0.15:  # –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            buy_score += 20
            confidence_factors.append("–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB - –æ—Ç—Å–∫–æ–∫")
        elif bb_position < 0.3:  # –í –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ
            buy_score += 10
            confidence_factors.append("–¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ BB")
        elif bb_position > 0.85:  # –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            sell_score += 20
            confidence_factors.append("–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB - –æ—Ç–∫–∞—Ç")
        elif bb_position > 0.7:  # –í –≤–µ—Ä—Ö–Ω–µ–π –∑–æ–Ω–µ
            sell_score += 10
            confidence_factors.append("–¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –∑–æ–Ω–µ BB")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        sma_20 = indicators.get('sma_20', price)
        sma_50 = indicators.get('sma_50', price)
        ema_12 = indicators.get('ema_12', price)
        ema_26 = indicators.get('ema_26', price)
        
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if price > ema_12 > ema_26 > sma_20:  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            buy_score += 30
            confidence_factors.append("–°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price < ema_12 < ema_26 < sma_20:  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            sell_score += 30
            confidence_factors.append("–°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price > ema_12 > ema_26:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            buy_score += 15
            confidence_factors.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price < ema_12 < ema_26:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            sell_score += 15
            confidence_factors.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô
        if volume_ratio > 1.8:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            volume_boost = 20
            if buy_score > sell_score:
                buy_score += volume_boost
                confidence_factors.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ ({volume_ratio:.1f}x)")
            else:
                sell_score += volume_boost
                confidence_factors.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ ({volume_ratio:.1f}x)")
        elif volume_ratio > 1.3:  # –£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            volume_boost = 10
            if buy_score > sell_score:
                buy_score += volume_boost
                confidence_factors.append(f"–£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
            else:
                sell_score += volume_boost
                confidence_factors.append(f"–£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô
        price_change_1h = indicators.get('price_change_1h', 0)
        price_change_4h = indicators.get('price_change_4h', 0)
        price_change_24h = indicators.get('price_change_24h', 0)
        
        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if abs(price_change_1h) > 0.015:  # 1.5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å
            if price_change_1h > 0:
                buy_score += 15
                confidence_factors.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç 1—á ({price_change_1h*100:.1f}%)")
            else:
                sell_score += 15
                confidence_factors.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ 1—á ({price_change_1h*100:.1f}%)")
        
        # –£—Å—Ç–æ–π—á–∏–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        if abs(price_change_4h) > 0.025 and abs(price_change_24h) > 0.04:
            if price_change_4h > 0 and price_change_24h > 0:
                buy_score += 20
                confidence_factors.append("–£—Å—Ç–æ–π—á–∏–≤—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif price_change_4h < 0 and price_change_24h < 0:
                sell_score += 20
                confidence_factors.append("–£—Å—Ç–æ–π—á–∏–≤—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if market_regime == 'bull_trend':
            buy_score += 15
            sell_score = int(sell_score * 0.8)
            confidence_factors.append("–ë—ã—á–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        elif market_regime == 'bear_trend':
            sell_score += 15
            buy_score = int(buy_score * 0.8)
            confidence_factors.append("–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        elif market_regime == 'high_volatility':
            # –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ–º —á—É—Ç—å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            buy_score = int(buy_score * 0.9)
            sell_score = int(sell_score * 0.9)
            confidence_factors.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if is_low_activity:
            buy_score = int(buy_score * 0.7)  # –°–Ω–∏–∂–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–æ—á—å—é
            sell_score = int(sell_score * 0.7)
            confidence_factors.append("–ü–µ—Ä–∏–æ–¥ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Å–Ω–∏–∂–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å")
        
        # –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
        signal_conflict = abs(buy_score - sell_score) < 8
        if signal_conflict and max(buy_score, sell_score) < 35:
            return self._create_hold_signal("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –æ–∂–∏–¥–∞–Ω–∏–µ")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            aggressiveness = getattr(self.strategy_manager, 'current_aggressiveness', 'MODERATE')
            if hasattr(aggressiveness, 'value'):
                aggressiveness = aggressiveness.value
        except:
            aggressiveness = 'MODERATE'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        if aggressiveness == 'CONSERVATIVE':
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            very_strong_threshold = 50
            strong_threshold = 35
            moderate_threshold = 25
            strategy_type_suffix = 'conservative'
        elif aggressiveness == 'AGGRESSIVE':
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ - –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
            very_strong_threshold = 30
            strong_threshold = 20
            moderate_threshold = 12
            strategy_type_suffix = 'aggressive'
        else:  # MODERATE
            # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            very_strong_threshold = 40
            strong_threshold = 28
            moderate_threshold = 18
            strategy_type_suffix = 'balanced'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–û–†–û–ì–ò
        if buy_score >= very_strong_threshold:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = min(0.9, buy_score / 100.0)
            should_execute = True
            stop_loss = price * 0.987  # 1.3% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 1.035  # 3.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô BUY (score: {buy_score}): " + "; ".join(confidence_factors[:3])
            
        elif sell_score >= very_strong_threshold:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = min(0.9, sell_score / 100.0)
            should_execute = True
            stop_loss = price * 1.013  # 1.3% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 0.965  # 3.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô SELL (score: {sell_score}): " + "; ".join(confidence_factors[:3])
            
        elif buy_score >= strong_threshold:  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = buy_score / 100.0
            should_execute = True
            stop_loss = price * 0.99  # 1% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 1.025  # 2.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–°–ò–õ–¨–ù–´–ô BUY (score: {buy_score}): " + "; ".join(confidence_factors[:3])
            
        elif sell_score >= strong_threshold:  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = sell_score / 100.0
            should_execute = True
            stop_loss = price * 1.01  # 1% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 0.975  # 2.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–°–ò–õ–¨–ù–´–ô SELL (score: {sell_score}): " + "; ".join(confidence_factors[:3])
            
        elif buy_score >= moderate_threshold:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = buy_score / 100.0
            should_execute = True
            stop_loss = price * 0.994  # 0.6% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 1.015  # 1.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–£–º–µ—Ä–µ–Ω–Ω—ã–π BUY (score: {buy_score}): " + "; ".join(confidence_factors[:2])
            
        elif sell_score >= moderate_threshold:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = sell_score / 100.0
            should_execute = True
            stop_loss = price * 1.006  # 0.6% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit = price * 0.985  # 1.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reason = f"–£–º–µ—Ä–µ–Ω–Ω—ã–π SELL (score: {sell_score}): " + "; ".join(confidence_factors[:2])
            
        else:  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - –Ω–µ —Ç–æ—Ä–≥—É–µ–º
            signal = 'hold'
            confidence = 0.1
            should_execute = False
            stop_loss = 0
            take_profit = 0
            reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–∞ (buy: {buy_score}, sell: {sell_score}) - –æ–∂–∏–¥–∞–Ω–∏–µ"
        
        return {
            'signal': signal,
            'should_execute': should_execute,
            'confidence': confidence,
            'strategy_type': f'adaptive_{strategy_type_suffix}',
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'reason': reason,
            'indicators': indicators,
            'market_regime': market_regime,
            'buy_score': buy_score,
            'sell_score': sell_score,
            'confidence_factors': confidence_factors,
            'time_filter': 'low_activity' if is_low_activity else 'normal'
        }
    
    def _create_hold_signal(self, reason: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        return {
            'signal': 'hold',
            'should_execute': False,
            'confidence': 0.0,
            'strategy_type': 'advanced_technical',
            'stop_loss': 0,
            'take_profit': 0,
            'reason': reason
        }
    
    async def _execute_entry(self, 
                           symbol: str, 
                           signal, 
                           price: float, 
                           timestamp):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if symbol in self.open_positions:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        if len(self.open_positions) >= self.config.max_positions:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = await self._calculate_position_size(symbol, signal, price)
        
        if position_size <= 0:
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        entry_price = self._apply_slippage(price, signal.get('signal', 'buy'))
        commission = position_size * entry_price * self.config.commission_rate
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞
        required_capital = position_size * entry_price + commission
        if required_capital > self.current_capital:
            return
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            timestamp = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        self.trade_counter += 1
        trade = BacktestTrade(
            id=self.trade_counter,
            symbol=symbol,
            side=signal.get('signal', 'buy'),
            entry_time=timestamp,
            entry_price=entry_price,
            quantity=position_size,
            commission=commission,
            strategy_type=signal.get('strategy_type', 'unknown'),
            confidence=signal.get('confidence', 0.5),
            stop_loss=signal.get('stop_loss') if signal.get('stop_loss', 0) > 0 else None,
            take_profit=signal.get('take_profit') if signal.get('take_profit', 0) > 0 else None
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
        self.current_capital -= required_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.open_positions[symbol] = trade
        
        logger.debug(f"–í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {symbol} {signal.get('signal', 'buy')} @ ${entry_price:.2f}, "
                    f"—Ä–∞–∑–º–µ—Ä: {position_size:.6f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0.5):.2f}")
    
    async def _calculate_position_size(self, symbol: str, signal, price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.config.position_sizing_method == "fixed_pct":
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            position_value = self.current_capital * self.config.position_size
            return position_value / price
            
        elif self.config.position_sizing_method == "risk_based":
            # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º AdvancedRiskManager)
            volatility = 0.02  # –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            confidence = signal.get('confidence', 0.5) if isinstance(signal, dict) else 0.5
            position_size_pct = await self.risk_manager.adaptive_position_sizing(
                symbol, confidence, volatility
            )
            position_value = self.current_capital * position_size_pct
            return position_value / price
            
        else:  # fixed_amount
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            position_value = self.config.initial_capital * self.config.position_size
            return position_value / price
    
    def _apply_slippage(self, price: float, side: str) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è"""
        if side == 'buy':
            return price * (1 + self.config.slippage_rate)
        else:  # sell
            return price * (1 - self.config.slippage_rate)
    
    async def _check_exit_conditions(self, current_prices: Dict[str, float], timestamp):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞"""
        positions_to_close = []
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            timestamp = datetime.now()
        
        for symbol, trade in self.open_positions.items():
            if symbol not in current_prices:
                continue
                
            current_price = current_prices[symbol]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            if trade.stop_loss and self._check_stop_loss(trade, current_price):
                positions_to_close.append((symbol, current_price, "stop_loss"))
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if trade.take_profit and self._check_take_profit(trade, current_price):
                positions_to_close.append((symbol, current_price, "take_profit"))
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏
            try:
                duration_hours = (timestamp - trade.entry_time).total_seconds() / 3600
                if duration_hours >= self.config.max_trade_duration:
                    positions_to_close.append((symbol, current_price, "time_limit"))
            except (AttributeError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for symbol, exit_price, reason in positions_to_close:
            await self._execute_exit(symbol, exit_price, timestamp, reason)
    
    def _check_stop_loss(self, trade: BacktestTrade, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if trade.side == 'buy':
            return current_price <= trade.stop_loss
        else:  # sell
            return current_price >= trade.stop_loss
    
    def _check_take_profit(self, trade: BacktestTrade, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if trade.side == 'buy':
            return current_price >= trade.take_profit
        else:  # sell
            return current_price <= trade.take_profit
    
    async def _execute_exit(self, symbol: str, exit_price: float, timestamp, reason: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.open_positions:
            return
        
        trade = self.open_positions[symbol]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        final_exit_price = self._apply_slippage(exit_price, 'sell' if trade.side == 'buy' else 'buy')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        if trade.side == 'buy':
            pnl = (final_exit_price - trade.entry_price) * trade.quantity
        else:  # sell
            pnl = (trade.entry_price - final_exit_price) * trade.quantity
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤—ã—Ö–æ–¥
        exit_commission = trade.quantity * final_exit_price * self.config.commission_rate
        pnl -= exit_commission
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            timestamp = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
        trade.exit_time = timestamp
        trade.exit_price = final_exit_price
        trade.pnl = pnl
        trade.pnl_pct = pnl / (trade.entry_price * trade.quantity) * 100
        trade.commission += exit_commission
        trade.status = TradeStatus.CLOSED
        trade.exit_reason = reason
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
        self.current_capital += (trade.quantity * final_exit_price) + pnl
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        self.trades.append(trade)
        del self.open_positions[symbol]
        
        logger.debug(f"–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {symbol} @ ${final_exit_price:.2f}, "
                    f"P&L: ${pnl:.2f} ({trade.pnl_pct:.2f}%), –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    
    async def _close_all_positions(self, end_date: datetime):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Ü–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        for symbol in list(self.open_positions.keys()):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
            trade = self.open_positions[symbol]
            await self._execute_exit(symbol, trade.entry_price, end_date, "backtest_end")
    
    async def _update_portfolio_value(self, current_prices: Dict[str, float], timestamp: datetime):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_value = self.current_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        for symbol, trade in self.open_positions.items():
            if symbol in current_prices:
                current_price = current_prices[symbol]
                position_value = trade.quantity * current_price
                portfolio_value += position_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        self.risk_manager.update_portfolio_value(portfolio_value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if portfolio_value > self.peak_capital:
            self.peak_capital = portfolio_value
    
    def _record_equity_point(self, timestamp, current_prices: Dict[str, float]):
        """–ó–∞–ø–∏—Å—å —Ç–æ—á–∫–∏ –∫—Ä–∏–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª–∞"""
        portfolio_value = self.current_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        for symbol, trade in self.open_positions.items():
            if symbol in current_prices:
                position_value = trade.quantity * current_prices[symbol]
                portfolio_value += position_value
        
        drawdown = (self.peak_capital - portfolio_value) / self.peak_capital if self.peak_capital > 0 else 0
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            timestamp = datetime.now()
        
        self.equity_curve.append({
            'timestamp': timestamp.isoformat(),
            'portfolio_value': portfolio_value,
            'cash': self.current_capital,
            'positions_value': portfolio_value - self.current_capital,
            'drawdown': drawdown,
            'open_positions': len(self.open_positions)
        })
    
    async def _calculate_metrics(self) -> BacktestMetrics:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if not self.trades:
            return BacktestMetrics(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        final_value = self.equity_curve[-1]['portfolio_value'] if self.equity_curve else self.current_capital
        total_return = final_value - self.config.initial_capital
        total_return_pct = (total_return / self.config.initial_capital) * 100
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        winning_trades = len([t for t in self.trades if t.pnl > 0])
        losing_trades = len([t for t in self.trades if t.pnl < 0])
        win_rate = winning_trades / len(self.trades) if self.trades else 0
        
        wins = [t.pnl for t in self.trades if t.pnl > 0]
        losses = [abs(t.pnl) for t in self.trades if t.pnl < 0]
        
        avg_win = np.mean(wins) if wins else 0
        avg_loss = np.mean(losses) if losses else 0
        largest_win = max(wins) if wins else 0
        largest_loss = max(losses) if losses else 0
        
        profit_factor = sum(wins) / sum(losses) if losses and sum(losses) > 0 else 0
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        durations = []
        for t in self.trades:
            if t.exit_time and t.entry_time:
                try:
                    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ - datetime –æ–±—ä–µ–∫—Ç—ã
                    if isinstance(t.entry_time, (int, float)):
                        entry_time = datetime.fromtimestamp(t.entry_time / 1000 if t.entry_time > 1e10 else t.entry_time)
                    else:
                        entry_time = t.entry_time
                    
                    if isinstance(t.exit_time, (int, float)):
                        exit_time = datetime.fromtimestamp(t.exit_time / 1000 if t.exit_time > 1e10 else t.exit_time)
                    else:
                        exit_time = t.exit_time
                    
                    duration_hours = (exit_time - entry_time).total_seconds() / 3600
                    durations.append(duration_hours)
                except (TypeError, AttributeError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
        avg_trade_duration = np.mean(durations) if durations else 0
        max_trade_duration = max(durations) if durations else 0
        min_trade_duration = min(durations) if durations else 0
        
        # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
        returns = [point['portfolio_value'] for point in self.equity_curve]
        if len(returns) > 1:
            pct_returns = [(returns[i] - returns[i-1]) / returns[i-1] for i in range(1, len(returns))]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedRiskManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VaR
            var_95 = await self.risk_manager.calculate_var(pct_returns, 0.95) if len(pct_returns) >= 30 else 0
            var_99 = await self.risk_manager.calculate_var(pct_returns, 0.99) if len(pct_returns) >= 30 else 0
            expected_shortfall = await self.risk_manager.calculate_expected_shortfall(pct_returns, 0.95) if len(pct_returns) >= 30 else 0
            
            volatility = np.std(pct_returns) * np.sqrt(252) if pct_returns else 0
            
            # Sharpe ratio
            risk_free_rate = self.config.risk_free_rate
            excess_return = (total_return_pct / 100) - risk_free_rate
            sharpe_ratio = excess_return / volatility if volatility > 0 else 0
            
            # Sortino ratio
            negative_returns = [r for r in pct_returns if r < 0]
            downside_volatility = np.std(negative_returns) * np.sqrt(252) if negative_returns else 0
            sortino_ratio = excess_return / downside_volatility if downside_volatility > 0 else 0
        else:
            var_95 = var_99 = expected_shortfall = volatility = 0
            sharpe_ratio = sortino_ratio = 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = max([point['drawdown'] for point in self.equity_curve]) if self.equity_curve else 0
        max_drawdown_pct = max_drawdown * 100
        
        # Calmar ratio
        calmar_ratio = (total_return_pct / 100) / max_drawdown if max_drawdown > 0 else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        recovery_factor = total_return / (max_drawdown * self.config.initial_capital) if max_drawdown > 0 else 0
        ulcer_index = 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        sterling_ratio = 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        return BacktestMetrics(
            total_return=total_return,
            total_return_pct=total_return_pct,
            sharpe_ratio=sharpe_ratio,
            sortino_ratio=sortino_ratio,
            calmar_ratio=calmar_ratio,
            max_drawdown=max_drawdown * self.config.initial_capital,
            max_drawdown_pct=max_drawdown_pct,
            total_trades=len(self.trades),
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            profit_factor=profit_factor,
            avg_win=avg_win,
            avg_loss=avg_loss,
            largest_win=largest_win,
            largest_loss=largest_loss,
            avg_trade_duration=avg_trade_duration,
            max_trade_duration=max_trade_duration,
            min_trade_duration=min_trade_duration,
            var_95=var_95,
            var_99=var_99,
            expected_shortfall=expected_shortfall,
            volatility=volatility,
            recovery_factor=recovery_factor,
            ulcer_index=ulcer_index,
            sterling_ratio=sterling_ratio
        )
    
    def _generate_summary(self, metrics: BacktestMetrics) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return {
            'performance': f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}% (${metrics.total_return:,.0f})",
            'risk': f"–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown_pct:.2f}%, Sharpe: {metrics.sharpe_ratio:.2f}",
            'trading': f"–°–¥–µ–ª–æ–∫: {metrics.total_trades}, –í–∏–Ω—Ä–µ–π—Ç: {metrics.win_rate:.1%}",
            'ratios': f"Profit Factor: {metrics.profit_factor:.2f}, Calmar: {metrics.calmar_ratio:.2f}"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
backtest_engine = BacktestEngine() 