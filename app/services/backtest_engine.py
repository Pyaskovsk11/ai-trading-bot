"""
BacktestEngine - –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å TradingStrategyManager –∏ AdvancedRiskManager
"""

import logging
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum
import asyncio
import json

from .trading_strategy_manager import TradingStrategyManager, StrategyConfig, StrategyType
from .advanced_risk_manager import AdvancedRiskManager, MarketRegime
from .adaptive_trading_service import AggressivenessProfile, AIMode
from .bingx_historical_data_service import bingx_historical_service

logger = logging.getLogger(__name__)

class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    MARKET = "market"
    LIMIT = "limit"
    STOP_LOSS = "stop_loss"
    TAKE_PROFIT = "take_profit"

class TradeStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫"""
    OPEN = "open"
    CLOSED = "closed"
    CANCELLED = "cancelled"

@dataclass
class BacktestTrade:
    """–°–¥–µ–ª–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    id: int
    symbol: str
    side: str  # 'buy' or 'sell'
    entry_time: datetime
    entry_price: float
    quantity: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    pnl: float = 0.0
    pnl_pct: float = 0.0
    commission: float = 0.0
    status: TradeStatus = TradeStatus.OPEN
    strategy_type: str = ""
    confidence: float = 0.0
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    exit_reason: str = ""
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–º/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º
    risk_per_unit: float = 0.0
    partial_taken: bool = False
    partial_scaled_qty: float = 0.0
    trail_stop: Optional[float] = None
    atr_at_entry: float = 0.0

@dataclass
class BacktestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_return: float
    total_return_pct: float
    sharpe_ratio: float
    sortino_ratio: float
    calmar_ratio: float
    max_drawdown: float
    max_drawdown_pct: float
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    profit_factor: float
    avg_win: float
    avg_loss: float
    largest_win: float
    largest_loss: float
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_trade_duration: float
    max_trade_duration: float
    min_trade_duration: float
    
    # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
    var_95: float
    var_99: float
    expected_shortfall: float
    volatility: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    recovery_factor: float
    ulcer_index: float
    sterling_ratio: float

@dataclass
class BacktestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    initial_capital: float = 100000.0
    commission_rate: float = 0.001  # 0.1%
    slippage_rate: float = 0.0005   # 0.05%
    max_positions: int = 10
    position_sizing_method: str = "risk_based"  # fixed_amount, fixed_pct, risk_based
    position_size: float = 0.02  # 2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (–∏—Å–ø. –¥–ª—è fixed_pct/fixed_amount)
    use_stop_loss: bool = True
    use_take_profit: bool = True
    max_trade_duration: int = 24  # —á–∞—Å–æ–≤
    risk_free_rate: float = 0.02  # 2% –≥–æ–¥–æ–≤—ã—Ö
    # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    max_risk_per_trade: float = 0.01  # —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (1% –∫–∞–ø–∏—Ç–∞–ª–∞)
    atr_period: int = 14
    atr_sl_multiplier: float = 1.4
    atr_tp_multiplier: float = 3.2
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –∏ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
    enable_trailing: bool = True
    trail_atr_multiplier: float = 1.2
    enable_partial_take_profit: bool = True
    partial_take_profit_r: float = 1.0  # –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –Ω–∞ 1.0R
    partial_close_pct: float = 0.5
    move_stop_to_be_on_partial: bool = True

class BacktestEngine:
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, config: BacktestConfig = None):
        self.config = config or BacktestConfig()
        self.strategy_manager = TradingStrategyManager()
        self.risk_manager = AdvancedRiskManager(self.config.initial_capital)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞
        self.current_capital = self.config.initial_capital
        self.peak_capital = self.config.initial_capital
        self.trades: List[BacktestTrade] = []
        self.open_positions: Dict[str, BacktestTrade] = {}
        self.equity_curve: List[Dict] = []
        self.trade_counter = 0
        # –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π
        self._cooldown_until: Dict[str, datetime] = {}
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –≤—Ö–æ–¥–∞–º–∏ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É
        self._last_entry_time: Dict[tuple, datetime] = {}
        self._min_same_side_cooldown_bars: int = 10
        # –ö—ç—à –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._historical_cache: Dict[str, pd.DataFrame] = {}
        
        logger.info("BacktestEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def run_backtest(self, 
                          strategy_config: StrategyConfig,
                          symbols: List[str],
                          start_date: datetime,
                          end_date: datetime,
                          timeframe: str = "1h",
                          strategy_mode: str = "all",
                          threshold_relax_pct: float = 0.0,
                          trend_thresholds: Dict[str, float] | None = None,
                          donchian_k: int = 20,
                          breakout_volume_min: float = 1.6) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, "
                       f"{start_date.date()} - {end_date.date()}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._initialize_backtest(strategy_config)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å–ª–∞–±–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
            self._threshold_relax_pct = max(0.0, min(0.9, float(threshold_relax_pct)))
            self._trend_thresholds = trend_thresholds or {'adx_min': 10.0, 'bb_width_min': 0.015, 'volume_ratio_min': 1.2}
            self._current_timeframe = timeframe
            self._donchian_k = max(5, int(donchian_k))
            self._breakout_volume_min = float(breakout_volume_min)
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—Ö–æ–¥–∞–º–∏ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É)
            if timeframe == '15m':
                self._min_same_side_cooldown_bars = 12  # ~3 —á–∞—Å–∞
            elif timeframe == '5m':
                self._min_same_side_cooldown_bars = 15  # ~75 –º–∏–Ω—É—Ç
            else:
                self._min_same_side_cooldown_bars = 8   # –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö –¢–§
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await self._generate_historical_data(symbols, start_date, end_date, timeframe)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å BingX –Ω–∞ –∫–∞–∂–¥–æ–º –±–∞—Ä–µ
            self._historical_cache = historical_data
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
            await self._run_backtest_loop(historical_data, symbols, timeframe, strategy_mode)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await self._close_all_positions(end_date)
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = await self._calculate_metrics()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                'config': asdict(self.config),
                'strategy_config': strategy_config.get_current_config() if hasattr(strategy_config, 'get_current_config') else {},
                'period': {
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat(),
                    'duration_days': (end_date - start_date).days
                },
                'symbols': symbols,
                'metrics': asdict(metrics),
                'trades': [asdict(trade) for trade in self.trades],
                'equity_curve': self.equity_curve,
                'summary': self._generate_summary(metrics)
            }
            
            logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {metrics.total_trades} —Å–¥–µ–ª–æ–∫, "
                       f"–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}%")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
            raise
    
    async def _initialize_backtest(self, strategy_config: StrategyConfig):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        await self.strategy_manager.initialize()
        self.strategy_manager.set_strategy_config(strategy_config)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_capital = self.config.initial_capital
        self.peak_capital = self.config.initial_capital
        self.trades.clear()
        self.open_positions.clear()
        self.equity_curve.clear()
        self.trade_counter = 0
        
        logger.info(f"–ë—ç–∫—Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –∫–∞–ø–∏—Ç–∞–ª ${self.config.initial_capital:,.0f}")
    
    async def _generate_historical_data(self, 
                                      symbols: List[str], 
                                      start_date: datetime, 
                                      end_date: datetime, 
                                      timeframe: str) -> Dict[str, pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö)"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
        logger.info(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BingX Historical Data Service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await bingx_historical_service.get_multiple_symbols_data(
                symbols, start_date, end_date, timeframe
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            for symbol, data in historical_data.items():
                if len(data) > 0:
                    logger.info(f"‚úÖ {symbol}: {len(data)} —Å–≤–µ—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            return historical_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.warning("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
            # Fallback –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = {}
            for symbol in symbols:
                data = await self._generate_synthetic_data(symbol, start_date, end_date, timeframe)
                historical_data[symbol] = data
                
            logger.info(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            return historical_data
    
    async def _generate_synthetic_data(self, 
                                     symbol: str, 
                                     start_date: datetime, 
                                     end_date: datetime, 
                                     timeframe: str) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É
        freq_map = {
            '1m': '1T', '5m': '5T', '15m': '15T', '30m': '30T',
            '1h': '1H', '4h': '4H', '1d': '1D'
        }
        freq = freq_map.get(timeframe, '1H')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        dates = pd.date_range(start=start_date, end=end_date, freq=freq)
        periods = len(dates)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–º–≤–æ–ª–∞)
        base_prices = {
            'BTCUSDT': 50000, 'ETHUSDT': 3000, 'ADAUSDT': 1.5,
            'BNBUSDT': 400, 'SOLUSDT': 100, 'XRPUSDT': 0.6
        }
        base_price = base_prices.get(symbol, 1000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
        np.random.seed(hash(symbol) % 2**32)  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥
        trend = np.linspace(0, 0.2, periods)  # 20% —Ä–æ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = 0.02  # 2% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        returns = np.random.normal(0, volatility, periods)
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤–æ–π —Ä—è–¥
        log_prices = np.log(base_price) + trend + np.cumsum(returns)
        prices = np.exp(log_prices)
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'high': prices * (1 + np.abs(np.random.normal(0, 0.01, periods))),
            'low': prices * (1 - np.abs(np.random.normal(0, 0.01, periods))),
            'close': prices,
            'volume': np.random.uniform(1000000, 5000000, periods)
        })
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
        df['high'] = np.maximum(df['high'], np.maximum(df['open'], df['close']))
        df['low'] = np.minimum(df['low'], np.minimum(df['open'], df['close']))
        
        df.set_index('timestamp', inplace=True)
        return df
    
    async def _run_backtest_loop(self, 
                               historical_data: Dict[str, pd.DataFrame], 
                               symbols: List[str], 
                               timeframe: str,
                               strategy_mode: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π datetime –∏–Ω–¥–µ–∫—Å
        all_timestamps = []
        for symbol, data in historical_data.items():
            if len(data) > 0:
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ datetime, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ timestamp –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
                if not isinstance(data.index, pd.DatetimeIndex):
                    if 'timestamp' in data.columns:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É timestamp
                        data = data.copy()
                        data['timestamp'] = pd.to_datetime(data['timestamp'])
                        data.set_index('timestamp', inplace=True)
                        historical_data[symbol] = data
                    else:
                        # –°–æ–∑–¥–∞–µ–º datetime –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                        tf_minutes = {'1m': 1, '5m': 5, '15m': 15, '30m': 30, '1h': 60, '4h': 240, '1d': 1440}
                        minutes = tf_minutes.get(timeframe, 60)
                        start_time = datetime.now() - timedelta(minutes=len(data) * minutes)
                        timestamps = [start_time + timedelta(minutes=i * minutes) for i in range(len(data))]
                        data = data.copy()
                        data.index = pd.DatetimeIndex(timestamps)
                        historical_data[symbol] = data
                
                all_timestamps.extend(data.index.tolist())
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        all_timestamps = sorted(list(set(all_timestamps)))
        
        for i, ts_val in enumerate(all_timestamps):
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp_dt –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º
            if isinstance(ts_val, pd.Timestamp):
                timestamp_dt = ts_val.to_pydatetime()
            elif isinstance(ts_val, (int, float)):
                if ts_val <= 0 or ts_val < 1e9:  # Invalid timestamp (e.g., 0 or very small)
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _run_backtest_loop: {ts_val}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                    timestamp_dt = datetime.now()
                else:
                    # Assume milliseconds if large, otherwise seconds
                    timestamp_dt = datetime.fromtimestamp(ts_val / 1000 if ts_val > 1e10 else ts_val)
            elif isinstance(ts_val, datetime):
                timestamp_dt = ts_val
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _run_backtest_loop: {type(ts_val)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp_dt = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            current_prices = {}
            for symbol in symbols:
                if ts_val in historical_data[symbol].index:
                    current_prices[symbol] = historical_data[symbol].loc[ts_val, 'close']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            await self._update_portfolio_value(current_prices, timestamp_dt)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
            await self._check_exit_conditions(current_prices, timestamp_dt)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            if i % 1 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –ö–ê–ñ–î–´–ô –±–∞—Ä (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞)
                await self._process_signals(symbols, current_prices, timestamp_dt, timeframe, strategy_mode)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if i % 10 == 0:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 10 –±–∞—Ä–æ–≤
                self._record_equity_point(timestamp_dt, current_prices)
    
    async def _process_signals(self, 
                             symbols: List[str], 
                             current_prices: Dict[str, float], 
                             timestamp: datetime, 
                             timeframe: str,
                             strategy_mode: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        for symbol in symbols:
            if symbol not in current_prices:
                continue
                
            try:
                # –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–º–µ—Å—Ç–æ ML
                # –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ
                signal = await self._generate_simple_signal(symbol, current_prices[symbol], timestamp, timeframe, strategy_mode)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
                if signal and signal.get('should_execute', False) and signal.get('signal') in ['buy', 'sell']:
                    await self._execute_entry(symbol, signal, current_prices[symbol], timestamp)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
    
    async def _generate_simple_signal(self, symbol: str, price: float, timestamp: datetime, timeframe: str, strategy_mode: str) -> Dict:
        """
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è PnL
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–í–´–ú!
            if isinstance(timestamp, (int, float)):
                if timestamp <= 0 or timestamp < 1e9:  # Invalid timestamp
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _generate_simple_signal: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                    timestamp = datetime.now()
                else:
                    timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
            elif isinstance(timestamp, pd.Timestamp):
                timestamp = timestamp.to_pydatetime()
            elif not isinstance(timestamp, datetime):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _generate_simple_signal: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ cooldown –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            if symbol in self._cooldown_until:
                cd_until = self._cooldown_until[symbol]
                if isinstance(cd_until, (int, float)):
                    if cd_until <= 0 or cd_until < 1e9:
                        del self._cooldown_until[symbol]
                    else:
                        self._cooldown_until[symbol] = datetime.fromtimestamp(cd_until / 1000 if cd_until > 1e10 else cd_until)
                elif not isinstance(cd_until, datetime):
                    del self._cooldown_until[symbol]
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ cooldown —É–∂–µ –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                elif isinstance(cd_until, datetime) and timestamp > cd_until:
                    del self._cooldown_until[symbol]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            historical_data = await self._get_recent_data_for_analysis(symbol, timestamp, timeframe)
            
            if len(historical_data) < 50:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                return self._create_hold_signal("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_technical_indicators(historical_data)
            
            # MTF-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è 15m: —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 1h (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ trend_only)
            if strategy_mode == 'trend_only' and timeframe in ['15m']:
                try:
                    htf = await self._get_recent_data_for_analysis(symbol, timestamp, '1h')
                    if len(htf) >= 50:
                        htf_ind = self._calculate_technical_indicators(htf)
                        ema12_h = htf_ind.get('ema_12', indicators.get('ema_12', price))
                        ema26_h = htf_ind.get('ema_26', indicators.get('ema_26', price))
                        macd_hist_h = htf_ind.get('macd_histogram', 0.0)
                        vol_ratio_h = htf_ind.get('volume_ratio', 1.0)
                        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –±—ã—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç—Ä–µ–±—É–µ–º –±—ã—á—å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 1h; –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ
                        if indicators.get('ema_12', price) > indicators.get('ema_26', price):
                            if not (ema12_h > ema26_h and macd_hist_h > 0 and vol_ratio_h >= 1.1):
                                return self._create_hold_signal("HTF(1h) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –±—ã—á—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        elif indicators.get('ema_12', price) < indicators.get('ema_26', price):
                            if not (ema12_h < ema26_h and macd_hist_h < 0 and vol_ratio_h >= 1.1):
                                return self._create_hold_signal("HTF(1h) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –º–µ–¥–≤–µ–∂—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                except Exception:
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ MTF-—Ñ–∏–ª—å—Ç—Ä –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    pass
            # –î–æ–ø. MTF-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è 15m: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 4h (EMA –∏ MACD —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã)
            if strategy_mode == 'trend_only' and timeframe in ['15m']:
                try:
                    h4 = await self._get_recent_data_for_analysis(symbol, timestamp, '4h')
                    if len(h4) >= 50:
                        h4_ind = self._calculate_technical_indicators(h4)
                        ema12_h4 = h4_ind.get('ema_12', indicators.get('ema_12', price))
                        ema26_h4 = h4_ind.get('ema_26', indicators.get('ema_26', price))
                        macd_hist_h4 = h4_ind.get('macd_histogram', 0.0)
                        vol_ratio_h4 = h4_ind.get('volume_ratio', 1.0)
                        if indicators.get('ema_12', price) > indicators.get('ema_26', price):
                            if not (ema12_h4 > ema26_h4 and macd_hist_h4 > 0 and vol_ratio_h4 >= 1.05):
                                return self._create_hold_signal("HTF(4h) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –±—ã—á—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        elif indicators.get('ema_12', price) < indicators.get('ema_26', price):
                            if not (ema12_h4 < ema26_h4 and macd_hist_h4 < 0 and vol_ratio_h4 >= 1.05):
                                return self._create_hold_signal("HTF(4h) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –º–µ–¥–≤–µ–∂—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                except Exception:
                    pass
            # MTF-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è 5m: —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 15m (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ trend_only)
            if strategy_mode == 'trend_only' and timeframe in ['5m']:
                try:
                    m15 = await self._get_recent_data_for_analysis(symbol, timestamp, '15m')
                    if len(m15) >= 50:
                        m15_ind = self._calculate_technical_indicators(m15)
                        ema12_m15 = m15_ind.get('ema_12', indicators.get('ema_12', price))
                        ema26_m15 = m15_ind.get('ema_26', indicators.get('ema_26', price))
                        macd_hist_m15 = m15_ind.get('macd_histogram', 0.0)
                        vol_ratio_m15 = m15_ind.get('volume_ratio', 1.0)
                        if indicators.get('ema_12', price) > indicators.get('ema_26', price):
                            if not (ema12_m15 > ema26_m15 and macd_hist_m15 > 0 and vol_ratio_m15 >= 1.1):
                                return self._create_hold_signal("HTF(15m) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –±—ã—á—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        elif indicators.get('ema_12', price) < indicators.get('ema_26', price):
                            if not (ema12_m15 < ema26_m15 and macd_hist_m15 < 0 and vol_ratio_m15 >= 1.1):
                                return self._create_hold_signal("HTF(15m) —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –º–µ–¥–≤–µ–∂—å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                except Exception:
                    pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            market_regime = self._detect_market_regime(historical_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            # Donchian breakout (K –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑—É–µ–º) + volume filter ‚Äî —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—É—Ç—å –≤—Ö–æ–¥–∞
            try:
                K = getattr(self, '_donchian_k', 20)
                if len(historical_data) >= K:
                    recent = historical_data.tail(K)
                    last_close = float(recent['close'].iloc[-1])
                    last_high = float(recent['high'].iloc[-1]) if 'high' in recent.columns else last_close
                    last_low = float(recent['low'].iloc[-1]) if 'low' in recent.columns else last_close
                    prev_close = float(recent['close'].iloc[-2]) if len(recent) >= 2 else last_close
                    prev_max = float(recent['high'].iloc[:-1].max())
                    prev_min = float(recent['low'].iloc[:-1].min())
                    atr = indicators.get('atr', max(1e-6, last_close * 0.01))
                    # –ï—â–µ –±–æ–ª–µ–µ –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–±—ä—ë–º–∞ –∏ –∏–º–ø—É–ª—å—Å–∞
                    volume_ratio_now = float(indicators.get('volume_ratio', 1.0))
                    tr_now = max(abs(last_high - last_low), abs(last_high - prev_close), abs(last_low - prev_close))
                    impulse_ok = tr_now >= 0.8 * atr  # –û—Å–ª–∞–±–ª–µ–Ω–æ —Å 1.0 –¥–æ 0.8
                    vol_ok = (volume_ratio_now >= 0.8) or impulse_ok  # –û—Å–ª–∞–±–ª–µ–Ω–æ —Å 1.1 –¥–æ 0.8
                    
                    # –û—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–±–æ—è: –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ/–Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
                    # –¢—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –∑–∞–∫—Ä—ã—Ç–∏–µ 2 –±–∞—Ä–æ–≤ –Ω–∞–¥/–Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ —Ä–µ—Ç–µ—Å—Ç
                    breakout_up = (last_close > prev_max and recent['close'].iloc[-2] > prev_max)  # –¥–≤–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–¥ –º–∞–∫—Å–∏–º—É–º–æ–º
                    breakout_down = (last_close < prev_min and recent['close'].iloc[-2] < prev_min)  # –¥–≤–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
                    
                    # –õ–æ–≥–∏–∫–∞ —Ä–µ—Ç–µ—Å—Ç–∞: –≤—Ö–æ–¥ –Ω–∞ –æ—Ç–∫–∞—Ç–µ –∫ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–±–æ—è (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
                    retest_up = (last_close > prev_min and last_close < prev_max and
                                last_low <= prev_min * 1.01 and  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1% –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.5%)
                                (volume_ratio_now >= 0.8 or tr_now >= 0.6 * atr))
                    retest_down = (last_close > prev_min and last_close < prev_max and
                                  last_high >= prev_max * 0.99 and  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1% –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.5%)
                                  (volume_ratio_now >= 0.8 or tr_now >= 0.6 * atr))
                    # –ü—Ä–∏–º–µ–Ω–∏–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ MTF-—Ñ–∏–ª—å—Ç—Ä—ã –≤—ã—à–µ (–æ–Ω–∏ –º–æ–≥–ª–∏ –≤–µ—Ä–Ω—É—Ç—å hold); –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç EMA
                    ema12 = indicators.get('ema_12', last_close)
                    ema26 = indicators.get('ema_26', last_close)
                    if breakout_up and vol_ok and ema12 >= ema26:
                        sl_mult = self.config.atr_sl_multiplier
                        tp_mult = self.config.atr_tp_multiplier
                        return {
                            'signal': 'buy',
                            'should_execute': True,
                            'confidence': 0.55,
                            'strategy_type': 'adaptive_breakout',
                            'stop_loss': max(0.0, last_close - atr * sl_mult),
                            'take_profit': last_close + atr * tp_mult,
                            'reason': 'Donchian breakout up + volume/impulse',
                            'indicators': indicators,
                            'market_regime': market_regime
                        }
                    if breakout_down and vol_ok and ema12 <= ema26:
                        sl_mult = self.config.atr_sl_multiplier
                        tp_mult = self.config.atr_tp_multiplier
                        return {
                            'signal': 'sell',
                            'should_execute': True,
                            'confidence': 0.55,
                            'strategy_type': 'adaptive_breakout',
                            'stop_loss': last_close + atr * sl_mult,
                            'take_profit': max(0.0, last_close - atr * tp_mult),
                            'reason': 'Donchian breakout down + volume/impulse',
                            'indicators': indicators,
                            'market_regime': market_regime
                        }
                    # –†–µ—Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∞
                    if retest_up and ema12 >= ema26:
                        sl_mult = self.config.atr_sl_multiplier
                        tp_mult = self.config.atr_tp_multiplier
                        return {
                            'signal': 'buy',
                            'should_execute': True,
                            'confidence': 0.45,  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Ç–µ—Å—Ç–∞
                            'strategy_type': 'adaptive_breakout',
                            'stop_loss': max(0.0, last_close - atr * sl_mult),
                            'take_profit': last_close + atr * tp_mult,
                            'reason': 'Donchian retest up + volume/impulse',
                            'indicators': indicators,
                            'market_regime': market_regime
                        }
                    if retest_down and ema12 <= ema26:
                        sl_mult = self.config.atr_sl_multiplier
                        tp_mult = self.config.atr_tp_multiplier
                        return {
                            'signal': 'sell',
                            'should_execute': True,
                            'confidence': 0.45,  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Ç–µ—Å—Ç–∞
                            'strategy_type': 'adaptive_breakout',
                            'stop_loss': last_close + atr * sl_mult,
                            'take_profit': max(0.0, last_close - atr * tp_mult),
                            'reason': 'Donchian retest down + volume/impulse',
                            'indicators': indicators,
                            'market_regime': market_regime
                        }
            except Exception:
                pass

            # –ï—Å–ª–∏ breakout –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
            signal_data = self._analyze_multi_indicator_signal(indicators, market_regime, price, timestamp, strategy_mode, symbol)
            
            return signal_data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return self._create_hold_signal(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    async def _get_recent_data_for_analysis(self, symbol: str, timestamp: datetime, timeframe: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            if isinstance(timestamp, (int, float)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                if timestamp <= 0 or timestamp < 1e9:  # –ú–µ–Ω—å—à–µ 2001 –≥–æ–¥–∞
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –¥–ª—è {symbol}: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                    timestamp = datetime.now()
                else:
                    timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
            elif isinstance(timestamp, pd.Timestamp):
                timestamp = timestamp.to_pydatetime()
            elif not isinstance(timestamp, datetime):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –¥–ª—è {symbol}: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                tf_map_minutes = { '1m':1, '3m':3, '5m':5, '15m':15, '30m':30, '1h':60, '4h':240 }
                tf_min = tf_map_minutes.get(timeframe, 60)
                bars_target = 1200
                lookback_minutes = tf_min * bars_target
                start_time = timestamp - timedelta(minutes=lookback_minutes)
                cached_df = None
                if hasattr(self, '_historical_cache') and symbol in self._historical_cache:
                    base_df = self._historical_cache.get(symbol)
                    if isinstance(base_df.index, pd.DatetimeIndex):
                        if timeframe == getattr(self, '_current_timeframe', timeframe):
                            cached_df = base_df.loc[(base_df.index >= start_time) & (base_df.index <= timestamp)]
                        else:
                            # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –≤ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                            freq_map = { '1m':'1T','3m':'3T','5m':'5T','15m':'15T','30m':'30T','1h':'1H','4h':'4H' }
                            target_freq = freq_map.get(timeframe, '1H')
                            resampled = base_df.resample(target_freq).agg({
                                'open': 'first',
                                'high': 'max',
                                'low': 'min',
                                'close': 'last',
                                'volume': 'sum'
                            }).dropna()
                            cached_df = resampled.loc[(resampled.index >= start_time) & (resampled.index <= timestamp)]
                if cached_df is not None and len(cached_df) >= 50:
                    return cached_df
            except Exception as e_cache:
                logger.debug(f"–ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol} ({timeframe}): {e_cache}")
            
            # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–∑–æ–≤–æ–≤)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∑–¥–µ—Å—å ‚Äî –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫—ç—à.
            # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –Ω–∏–∂–µ.
            
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        
        # Fallback –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        return await self._generate_synthetic_analysis_data(symbol, timestamp, timeframe)
    
    async def _generate_synthetic_analysis_data(self, symbol: str, timestamp: datetime, timeframe: str) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp
        if isinstance(timestamp, (int, float)):
            if timestamp <= 0 or timestamp < 1e9:  # Invalid timestamp
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _generate_synthetic_analysis_data: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            else:
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _generate_synthetic_analysis_data: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            timestamp = datetime.now()
        
        tf_map_minutes = { '1m':1, '3m':3, '5m':5, '15m':15, '30m':30, '1h':60, '4h':240 }
        tf_min = tf_map_minutes.get(timeframe, 60)
        bars_target = 1200
        lookback_minutes = tf_min * bars_target
        start_time = timestamp - timedelta(minutes=lookback_minutes)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        pandas_freq = f"{tf_min}T" if tf_min < 60 else (f"{int(tf_min/60)}H")
        dates = pd.date_range(start=start_time, end=timestamp, freq=pandas_freq)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        base_prices = {
            'BTCUSDT': 50000, 'ETHUSDT': 3000, 'ADAUSDT': 1.5,
            'BNBUSDT': 400, 'SOLUSDT': 100, 'XRPUSDT': 0.6
        }
        base_price = base_prices.get(symbol, 1000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        np.random.seed(hash(f"{symbol}_{timestamp.strftime('%Y%m%d%H%M')}_{timeframe}") % 2**32)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        trend_strength = 0.002  # 0.2% —Ç—Ä–µ–Ω–¥ –∑–∞ —á–∞—Å
        trend_direction = 1 if (timestamp.minute // max(1,int(tf_min)) % 24) < 12 else -1
        
        prices = []
        current_price = base_price
        
        for i in range(len(dates)):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            trend_component = trend_direction * trend_strength * current_price
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = np.random.normal(0, 0.01) * current_price  # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            cycle_component = 0.005 * current_price * np.sin(i * 0.1)
            
            current_price += trend_component + volatility + cycle_component
            prices.append(current_price)
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'close': prices,
            'volume': np.random.uniform(1000000, 5000000, len(dates))
        })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º high/low –Ω–∞ –æ—Å–Ω–æ–≤–µ close
        df['high'] = df['close'] * (1 + np.abs(np.random.normal(0, 0.005, len(df))))
        df['low'] = df['close'] * (1 - np.abs(np.random.normal(0, 0.005, len(df))))
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
        df['high'] = np.maximum(df['high'], np.maximum(df['open'], df['close']))
        df['low'] = np.minimum(df['low'], np.minimum(df['open'], df['close']))
        
        return df
    
    def _calculate_technical_indicators(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        indicators['rsi'] = 100 - (100 / (1 + rs)).iloc[-1]
        
        # MACD
        ema_12 = df['close'].ewm(span=12).mean()
        ema_26 = df['close'].ewm(span=26).mean()
        macd = ema_12 - ema_26
        macd_signal = macd.ewm(span=9).mean()
        indicators['macd'] = macd.iloc[-1]
        indicators['macd_signal'] = macd_signal.iloc[-1]
        indicators['macd_histogram'] = (macd - macd_signal).iloc[-1]
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞/–æ—Å–ª–∞–±–ª–µ–Ω–∏—è
        if len(macd) >= 2:
            indicators['macd_hist_prev'] = (macd - macd_signal).iloc[-2]
        else:
            indicators['macd_hist_prev'] = indicators['macd_histogram']
        if len(ema_12) >= 2 and len(ema_26) >= 2:
            indicators['ema12_prev'] = ema_12.iloc[-2]
            indicators['ema26_prev'] = ema_26.iloc[-2]
        else:
            indicators['ema12_prev'] = ema_12.iloc[-1]
            indicators['ema26_prev'] = ema_26.iloc[-1]
        
        # Bollinger Bands
        bb_middle = df['close'].rolling(20).mean()
        bb_std = df['close'].rolling(20).std()
        bb_upper = bb_middle + (bb_std * 2)
        bb_lower = bb_middle - (bb_std * 2)
        indicators['bb_position'] = ((df['close'].iloc[-1] - bb_lower.iloc[-1]) / 
                                   (bb_upper.iloc[-1] - bb_lower.iloc[-1]))
        # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        with pd.option_context('mode.use_inf_as_na', True):
            width_val = (bb_upper - bb_lower).iloc[-1] / max(1e-9, bb_middle.iloc[-1])
        indicators['bb_width'] = float(width_val)
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        indicators['sma_20'] = df['close'].rolling(20).mean().iloc[-1]
        indicators['sma_50'] = df['close'].rolling(50).mean().iloc[-1]
        indicators['ema_12'] = ema_12.iloc[-1]
        indicators['ema_26'] = ema_26.iloc[-1]
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        indicators['volume_sma'] = df['volume'].rolling(20).mean().iloc[-1]
        indicators['volume_ratio'] = df['volume'].iloc[-1] / indicators['volume_sma']
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        indicators['volatility'] = df['close'].pct_change().rolling(20).std().iloc[-1]
        
        # –¶–µ–Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        indicators['price_change_1h'] = (df['close'].iloc[-1] - df['close'].iloc[-2]) / df['close'].iloc[-2]
        indicators['price_change_4h'] = (df['close'].iloc[-1] - df['close'].iloc[-5]) / df['close'].iloc[-5] if len(df) >= 5 else 0
        indicators['price_change_24h'] = (df['close'].iloc[-1] - df['close'].iloc[-25]) / df['close'].iloc[-25] if len(df) >= 25 else 0
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä)
        indicators['price_change_last'] = df['close'].pct_change().iloc[-1]
        
        # ATR (Wilder)
        period = max(2, self.config.atr_period)
        high = df['high'] if 'high' in df.columns else df['close']
        low = df['low'] if 'low' in df.columns else df['close']
        close = df['close']
        prev_close = close.shift(1)
        tr = pd.concat([
            (high - low).abs(),
            (high - prev_close).abs(),
            (low - prev_close).abs()
        ], axis=1).max(axis=1)
        atr = tr.ewm(alpha=1/period, adjust=False).mean()
        indicators['atr'] = float(atr.iloc[-1])
        
        # ADX (Wilder)
        up_move = high.diff()
        down_move = -low.diff()
        plus_dm = np.where((up_move > down_move) & (up_move > 0), up_move, 0.0)
        minus_dm = np.where((down_move > up_move) & (down_move > 0), down_move, 0.0)
        plus_di = 100 * pd.Series(plus_dm, index=high.index).ewm(alpha=1/period, adjust=False).mean() / atr
        minus_di = 100 * pd.Series(minus_dm, index=low.index).ewm(alpha=1/period, adjust=False).mean() / atr
        dx = (abs(plus_di - minus_di) / (plus_di + minus_di).replace(0, np.nan)) * 100
        adx = dx.ewm(alpha=1/period, adjust=False).mean()
        indicators['adx'] = float(adx.fillna(0).iloc[-1])
        
        return indicators
    
    def _detect_market_regime(self, df: pd.DataFrame) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if len(df) < 50:
            return 'sideways'
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        sma_20 = df['close'].rolling(20).mean().iloc[-1]
        sma_50 = df['close'].rolling(50).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = df['close'].pct_change().rolling(20).std().iloc[-1]
        
        if current_price > sma_20 > sma_50 and volatility < 0.03:
            return 'bull_trend'
        elif current_price < sma_20 < sma_50 and volatility < 0.03:
            return 'bear_trend'
        elif volatility > 0.05:
            return 'high_volatility'
        else:
            return 'sideways'
    
    def _analyze_multi_indicator_signal(self, indicators: Dict, market_regime: str, price: float, timestamp: datetime, strategy_mode: str, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        buy_score = 0
        sell_score = 0
        confidence_factors = []
        signal_type = 'hold'
        
        # –§–ò–õ–¨–¢–† –ö–ê–ß–ï–°–¢–í–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
        volatility = indicators.get('volatility', 0.02)
        volume_ratio = indicators.get('volume_ratio', 1.0)
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–ª–æ—Ö–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–µ—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã)
        if volatility > 0.15:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.12 –¥–æ 0.15 - —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            return self._create_hold_signal("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        if volume_ratio < 0.1:  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.2 –¥–æ 0.1 - –µ—â–µ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
            return self._create_hold_signal("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
        
        # –í–†–ï–ú–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†: –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω)
        hour = timestamp.hour if hasattr(timestamp, 'hour') else datetime.now().hour
        is_low_activity = hour in [0, 1, 2, 3, 4]  # –£—Å–∏–ª–∏–ª–∏ –Ω–æ—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è 5m/15m

        # –¢—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä (—Ä–µ–∂–∏–º trend_only) + ADX/BB width
        sma_20 = indicators.get('sma_20', price)
        sma_50 = indicators.get('sma_50', price)
        ema_12 = indicators.get('ema_12', price)
        ema_26 = indicators.get('ema_26', price)
        adx = indicators.get('adx', 0.0)
        bb_width = indicators.get('bb_width', 0.0)
        bb_pos = indicators.get('bb_position', 0.5)
        trend_ok = True
        if strategy_mode == 'trend_only':
            trending = ((price > ema_12 > ema_26 > sma_20) or (price < ema_12 < ema_26 < sma_20))
            tt = getattr(self, '_trend_thresholds', {'adx_min':10.0,'bb_width_min':0.015,'volume_ratio_min':1.2})
            impulse_ok = (adx >= tt.get('adx_min', 10.0)) or (bb_width >= tt.get('bb_width_min', 0.015)) or (volume_ratio >= tt.get('volume_ratio_min', 1.2))
            trend_ok = trending and impulse_ok
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è SOL
        is_sol = symbol.upper().startswith('SOL')
        rsi = indicators.get('rsi', 50)
        if is_sol:
            # –ñ—ë—Å—Ç–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–∞ –¥–ª—è SOL: –≤—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º + –∏–º–ø—É–ª—å—Å (ADX/—à–∏—Ä–∏–Ω–∞ BB)
            entry_quality = (volume_ratio >= 1.6) and (adx >= 15.0 or bb_width >= 0.02)
            if not entry_quality:
                return self._create_hold_signal("SOL: entry quality gate (vol/adx/bb)")
            # –£—Å–∏–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–æ–≤ (–±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–∏–∂–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–æ–≤)
            if rsi > 58:
                buy_score += 5
                confidence_factors.append("RSI>58 (SOL)")
            elif rsi < 42:
                sell_score += 5
                confidence_factors.append("RSI<42 (SOL)")
            if volume_ratio > 1.8:
                if buy_score >= sell_score:
                    buy_score += 5
                else:
                    sell_score += 5
                confidence_factors.append(f"High volume {volume_ratio:.1f}x (SOL)")
        
        # RSI –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ü–û–†–û–ì–ò
        if rsi < 30:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            buy_score += 30
            confidence_factors.append(f"RSI —Å–∏–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π ({rsi:.1f}) - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        elif rsi < 40:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            buy_score += 15
            confidence_factors.append(f"RSI –Ω–∏–∑–∫–∏–π ({rsi:.1f}) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏")
        elif rsi > 70:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            sell_score += 30
            confidence_factors.append(f"RSI —Å–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π ({rsi:.1f}) - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        elif rsi > 60:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            sell_score += 15
            confidence_factors.append(f"RSI –≤—ã—Å–æ–∫–∏–π ({rsi:.1f}) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
        
        # MACD –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        
        # –°–∏–ª—å–Ω—ã–µ MACD —Å–∏–≥–Ω–∞–ª—ã
        if macd > macd_signal and macd_histogram > 0:
            buy_score += 25
            confidence_factors.append("MACD —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd < macd_signal and macd_histogram < 0:
            sell_score += 25
            confidence_factors.append("MACD —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd > macd_signal:
            buy_score += 12
            confidence_factors.append("MACD —É–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
        elif macd < macd_signal:
            sell_score += 12
            confidence_factors.append("MACD —É–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        
        # Bollinger Bands - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        bb_position = indicators.get('bb_position', 0.5)
        if bb_position < 0.15:  # –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            buy_score += 20
            confidence_factors.append("–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB - –æ—Ç—Å–∫–æ–∫")
        elif bb_position < 0.3:  # –í –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ
            buy_score += 10
            confidence_factors.append("–¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ BB")
        elif bb_position > 0.85:  # –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            sell_score += 20
            confidence_factors.append("–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB - –æ—Ç–∫–∞—Ç")
        elif bb_position > 0.7:  # –í –≤–µ—Ä—Ö–Ω–µ–π –∑–æ–Ω–µ
            sell_score += 10
            confidence_factors.append("–¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –∑–æ–Ω–µ BB")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        sma_20 = indicators.get('sma_20', price)
        sma_50 = indicators.get('sma_50', price)
        ema_12 = indicators.get('ema_12', price)
        ema_26 = indicators.get('ema_26', price)
        
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if price > ema_12 > ema_26 > sma_20:  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            buy_score += 30
            confidence_factors.append("–°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price < ema_12 < ema_26 < sma_20:  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            sell_score += 30
            confidence_factors.append("–°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price > ema_12 > ema_26:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            buy_score += 15
            confidence_factors.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif price < ema_12 < ema_26:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            sell_score += 15
            confidence_factors.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô
        if volume_ratio > 1.8:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            volume_boost = 20
            if buy_score > sell_score:
                buy_score += volume_boost
                confidence_factors.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ ({volume_ratio:.1f}x)")
            else:
                sell_score += volume_boost
                confidence_factors.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ ({volume_ratio:.1f}x)")
        elif volume_ratio > 1.3:  # –£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            volume_boost = 10
            if buy_score > sell_score:
                buy_score += volume_boost
                confidence_factors.append(f"–£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
            else:
                sell_score += volume_boost
                confidence_factors.append(f"–£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô
        price_change_1h = indicators.get('price_change_1h', 0)
        price_change_4h = indicators.get('price_change_4h', 0)
        price_change_24h = indicators.get('price_change_24h', 0)
        
        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if abs(price_change_1h) > 0.015:  # 1.5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å
            if price_change_1h > 0:
                buy_score += 15
                confidence_factors.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç 1—á ({price_change_1h*100:.1f}%)")
            else:
                sell_score += 15
                confidence_factors.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ 1—á ({price_change_1h*100:.1f}%)")
        
        # –£—Å—Ç–æ–π—á–∏–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        if abs(price_change_4h) > 0.025 and abs(price_change_24h) > 0.04:
            if price_change_4h > 0 and price_change_24h > 0:
                buy_score += 20
                confidence_factors.append("–£—Å—Ç–æ–π—á–∏–≤—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif price_change_4h < 0 and price_change_24h < 0:
                sell_score += 20
                confidence_factors.append("–£—Å—Ç–æ–π—á–∏–≤—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if market_regime == 'bull_trend':
            buy_score += 15
            sell_score = int(sell_score * 0.8)
            confidence_factors.append("–ë—ã—á–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        elif market_regime == 'bear_trend':
            sell_score += 15
            buy_score = int(buy_score * 0.8)
            confidence_factors.append("–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        elif market_regime == 'high_volatility':
            # –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ–º —á—É—Ç—å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            buy_score = int(buy_score * 0.9)
            sell_score = int(sell_score * 0.9)
            confidence_factors.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if is_low_activity:
            buy_score = int(buy_score * 0.7)  # –°–Ω–∏–∂–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–æ—á—å—é
            sell_score = int(sell_score * 0.7)
            confidence_factors.append("–ü–µ—Ä–∏–æ–¥ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Å–Ω–∏–∂–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å")
        
        # –î–ª—è 15m: —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–∫–Ω–∞ 6-22 UTC (–∏–∑–±–µ–≥–∞–µ–º –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        tf_cur = getattr(self, '_current_timeframe', '1h')
        if tf_cur in ['15m']:
            if hour < 6 or hour > 22:
                return self._create_hold_signal("15m: –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ 6-22 UTC")
        elif tf_cur in ['1h'] and is_low_activity:
            return self._create_hold_signal("1h: –Ω–æ—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥ ‚Äî –≤—Ö–æ–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–∑–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (>2% –∑–∞ –±–∞—Ä) ‚Äî 2 –±–∞—Ä–∞ –Ω–∞ 15m
        pc_last = indicators.get('price_change_last', 0.0)
        cd_until = self._cooldown_until.get(symbol)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è cd_until - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ datetime
        if cd_until and not isinstance(cd_until, datetime):
            if isinstance(cd_until, (int, float)):
                if cd_until <= 0 or cd_until < 1e9:
                    cd_until = None
                else:
                    cd_until = datetime.fromtimestamp(cd_until / 1000 if cd_until > 1e10 else cd_until)
            else:
                cd_until = None
        
        if tf_cur in ['15m'] and cd_until and timestamp < cd_until:
            return self._create_hold_signal("–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–∑–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è")
        if tf_cur in ['15m'] and abs(pc_last) >= 0.02:
            self._cooldown_until[symbol] = timestamp + timedelta(minutes=30)
            return self._create_hold_signal("–†–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ")
        # –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –Ω–∞ 5m –ø–æ—Å–ª–µ >2% ‚Äî 3 –±–∞—Ä–∞ (15 –º–∏–Ω—É—Ç) - —É–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥
        if tf_cur in ['5m'] and cd_until and timestamp < cd_until:
            return self._create_hold_signal("5m –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–º–ø—É–ª—å—Å–∞")
        if tf_cur in ['5m'] and abs(pc_last) >= 0.02:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.015 –¥–æ 0.02
            self._cooldown_until[symbol] = timestamp + timedelta(minutes=20)
            return self._create_hold_signal("5m —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ")
        
        # –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
        signal_conflict = abs(buy_score - sell_score) < 5  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8 –¥–æ 5
        if signal_conflict and max(buy_score, sell_score) < 20:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 28 –¥–æ 20
            # –ù–∞ 15m –æ—Ç–∫–ª—é—á–∞–µ–º –ª—ë–≥–∫–∏–µ –≤—Ö–æ–¥—ã –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ HOLD
            if getattr(self, '_current_timeframe', '1h') == '15m':
                return self._create_hold_signal("15m: –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî HOLD")
            # –ü–æ–ø—ã—Ç–∫–∞ –ª—ë–≥–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏ EMA/–æ–±—ä—ë–º–µ –Ω–∞ –¥—Ä—É–≥–∏—Ö –¢–§
            if ema_12 > ema_26 and volume_ratio >= 1.0:
                buy_score += 15
                confidence_factors.append("Light buy via EMA/volume (conflict)")
            elif ema_12 < ema_26 and volume_ratio >= 1.0:
                sell_score += 15
                confidence_factors.append("Light sell via EMA/volume (conflict)")
            else:
                return self._create_hold_signal("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –æ–∂–∏–¥–∞–Ω–∏–µ")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            aggressiveness = getattr(self.strategy_manager, 'current_aggressiveness', 'MODERATE')
            if hasattr(aggressiveness, 'value'):
                aggressiveness = aggressiveness.value
        except:
            aggressiveness = 'MODERATE'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ (—Å–Ω–∏–∂–µ–Ω—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫)
        if aggressiveness == 'CONSERVATIVE':
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            very_strong_threshold = 40
            strong_threshold = 25
            moderate_threshold = 15
            strategy_type_suffix = 'conservative'
        elif aggressiveness == 'AGGRESSIVE':
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ - –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
            very_strong_threshold = 20
            strong_threshold = 12
            moderate_threshold = 6
            strategy_type_suffix = 'aggressive'
        else:  # MODERATE
            # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            very_strong_threshold = 30
            strong_threshold = 18
            moderate_threshold = 10
            strategy_type_suffix = 'balanced'

        # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ —Å–ª–∞–±—ã–π/–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –∞ –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥–∏
        if not trend_ok:
            very_strong_threshold += 4
            strong_threshold += 8
            moderate_threshold += 8

        # –û—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ (quick/fallback): –ø–æ–Ω–∏–∂–∞–µ–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        relax = getattr(self, '_threshold_relax_pct', 0.0)
        if relax > 0:
            very_strong_threshold = max(0, int(round(very_strong_threshold * (1 - relax))))
            strong_threshold = max(0, int(round(strong_threshold * (1 - relax))))
            moderate_threshold = max(0, int(round(moderate_threshold * (1 - relax))))

        # –û–±–ª–µ–≥—á—ë–Ω–Ω—ã–π –≤—Ö–æ–¥ –ø—Ä–∏ —Å–ª–∞–±–æ–º —Ç—Ä–µ–Ω–¥–µ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞ –æ–±—ä—ë–º–æ–º –∏ EMA —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
        if not trend_ok:
            if ema_12 > ema_26 and volume_ratio >= 1.0:  # –°–Ω–∏–∂–µ–Ω–æ —Å 1.2 –¥–æ 1.0
                buy_score += 25  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 25
                confidence_factors.append("Light entry boost (bull) via EMA/volume")
            elif ema_12 < ema_26 and volume_ratio >= 1.0:  # –°–Ω–∏–∂–µ–Ω–æ —Å 1.2 –¥–æ 1.0
                sell_score += 25  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 25
                confidence_factors.append("Light entry boost (bear) via EMA/volume")
        
        # –ù–∏–∂–µ ‚Äî –±–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. –ó–∞–º–µ–Ω–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ SL/TP –Ω–∞ ATR-–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã
        atr = indicators.get('atr', price * 0.01)
        sl_mult = self.config.atr_sl_multiplier
        tp_mult = self.config.atr_tp_multiplier
        # –î–ª—è 15m/1h —Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–º SL –∏ TP, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –≤—ã–±–∏–≤–∞–Ω–∏–µ –ø–æ —à—É–º—É
        if tf_cur in ['15m', '1h']:
            sl_mult *= 1.22
            tp_mult *= 1.14
        
        # –†–µ–∂–∏–º–Ω–æ-–∑–∞–≤–∏—Å–∏–º–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ TP/SL
        if market_regime == 'bull_trend':
            sl_mult *= 0.9
            tp_mult *= 1.15
        elif market_regime == 'bear_trend':
            sl_mult *= 1.1
            tp_mult *= 1.08
        elif market_regime == 'high_volatility':
            sl_mult *= 1.2
            tp_mult *= 1.2
        # –î–æ–ø. —É–≤–µ–ª–∏—á–µ–Ω–∏–µ TP –¥–ª—è SOL –≤ bull_trend
        if market_regime == 'bull_trend' and symbol.upper().startswith('SOL'):
            tp_mult *= 1.1

        # –ù–µ–±–æ–ª—å—à–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
        strong_threshold = int(strong_threshold + 2)
        moderate_threshold = int(moderate_threshold + 2)
        # –î–æ–ø. —É—Å–∏–ª–µ–Ω–∏–µ –¥–ª—è SOL (—Å–º–µ—â–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        if symbol.upper().startswith('SOL'):
            strong_threshold += 4
            moderate_threshold += 4
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è 15m (all/trend_only):
        if tf_cur in ['15m']:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ATR/price –ø–æ—Ä–æ–≥, —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å —à—É–º
            atr_val = indicators.get('atr', max(1e-6, price * 0.005))
            if atr_val / max(1e-6, price) < 0.0045:
                return self._create_hold_signal("15m: –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR/price)")
            # –ì–µ–π—Ç –ø–æ EMA/SMA –∏ –æ–±—ä—ë–º—É
            if not ((ema_12 > ema_26 and price > sma_20 and volume_ratio >= 1.6) or (ema_12 < ema_26 and price < sma_20 and volume_ratio >= 1.6)):
                return self._create_hold_signal("15m: —É—Å–ª–æ–≤–∏—è EMA/SMA/–æ–±—ä—ë–º –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            # MACD + RSI —Ñ–∏–ª—å—Ç—Ä—ã –∏–º–ø—É–ª—å—Å–∞ (—É–∂–µ—Å—Ç–æ—á—ë–Ω–Ω—ã–µ)
            macd_hist = indicators.get('macd_histogram', 0.0)
            rsi_val = indicators.get('rsi', 50)
            if ema_12 > ema_26 and not (macd_hist > 0.0 and rsi_val > 50):
                return self._create_hold_signal("15m: —Å–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å –¥–ª—è –ª–æ–Ω–≥–∞ (MACD/RSI)")
            if ema_12 < ema_26 and not (macd_hist < 0.0 and rsi_val < 50):
                return self._create_hold_signal("15m: —Å–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å –¥–ª—è —à–æ—Ä—Ç–∞ (MACD/RSI)")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–û–†–û–ì–ò
        if buy_score >= very_strong_threshold:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = min(0.9, buy_score / 100.0)
            should_execute = True
            stop_loss = max(0.0, price - atr * sl_mult)
            take_profit = price + atr * tp_mult
            reason = f"–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô BUY (score: {buy_score}): " + "; ".join(confidence_factors[:3])
        
        elif sell_score >= very_strong_threshold:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = min(0.9, sell_score / 100.0)
            should_execute = True
            stop_loss = price + atr * sl_mult
            take_profit = max(0.0, price - atr * tp_mult)
            reason = f"–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô SELL (score: {sell_score}): " + "; ".join(confidence_factors[:3])
        
        elif buy_score >= strong_threshold:  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = buy_score / 100.0
            should_execute = True
            stop_loss = max(0.0, price - atr * sl_mult)
            take_profit = price + atr * tp_mult
            reason = f"–°–ò–õ–¨–ù–´–ô BUY (score: {buy_score}): " + "; ".join(confidence_factors[:3])
        
        elif sell_score >= strong_threshold:  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = sell_score / 100.0
            should_execute = True
            stop_loss = price + atr * sl_mult
            take_profit = max(0.0, price - atr * tp_mult)
            reason = f"–°–ò–õ–¨–ù–´–ô SELL (score: {sell_score}): " + "; ".join(confidence_factors[:3])
        
        elif buy_score >= moderate_threshold:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'buy'
            confidence = buy_score / 100.0
            should_execute = True
            stop_loss = max(0.0, price - atr * sl_mult)
            take_profit = price + atr * (tp_mult * 0.7)
            reason = f"–£–º–µ—Ä–µ–Ω–Ω—ã–π BUY (score: {buy_score}): " + "; ".join(confidence_factors[:2])
        
        elif sell_score >= moderate_threshold:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = 'sell'
            confidence = sell_score / 100.0
            should_execute = True
            stop_loss = price + atr * sl_mult
            take_profit = max(0.0, price - atr * (tp_mult * 0.7))
            reason = f"–£–º–µ—Ä–µ–Ω–Ω—ã–π SELL (score: {sell_score}): " + "; ".join(confidence_factors[:2])
        
        else:  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - –Ω–µ —Ç–æ—Ä–≥—É–µ–º
            signal = 'hold'
            confidence = 0.1
            should_execute = False
            stop_loss = 0
            take_profit = 0
            reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–∞ (buy: {buy_score}, sell: {sell_score}) - –æ–∂–∏–¥–∞–Ω–∏–µ"
        
        return {
            'signal': signal,
            'should_execute': should_execute,
            'confidence': confidence,
            'strategy_type': f'adaptive_{strategy_type_suffix}',
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'reason': reason,
            'indicators': indicators,
            'market_regime': market_regime,
            'buy_score': buy_score,
            'sell_score': sell_score,
            'confidence_factors': confidence_factors,
            'time_filter': 'low_activity' if is_low_activity else 'normal'
        }
    
    def _create_hold_signal(self, reason: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        return {
            'signal': 'hold',
            'should_execute': False,
            'confidence': 0.0,
            'strategy_type': 'advanced_technical',
            'stop_loss': 0,
            'take_profit': 0,
            'reason': reason
        }
    
    async def _execute_entry(self, 
                           symbol: str, 
                           signal, 
                           price: float, 
                           timestamp):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if symbol in self.open_positions:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        if len(self.open_positions) >= self.config.max_positions:
            return
        
        # –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –≤—Ö–æ–¥–∞–º–∏ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É
        side = signal.get('signal', 'buy') if isinstance(signal, dict) else 'buy'
        tf_min = {'1m':1,'3m':3,'5m':5,'15m':15,'30m':30,'1h':60,'4h':240}.get(getattr(self, '_current_timeframe', '1h'), 60)
        min_delta = timedelta(minutes=self._min_same_side_cooldown_bars * tf_min)
        le_key = (symbol, side)
        last_t = self._last_entry_time.get(le_key)
        if last_t and timestamp < last_t + min_delta:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = await self._calculate_position_size(symbol, signal, price)
        
        if position_size <= 0:
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        entry_price = self._apply_slippage(price, side)
        commission = position_size * entry_price * self.config.commission_rate
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞
        required_capital = position_size * entry_price + commission
        if required_capital > self.current_capital:
            return
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            if timestamp <= 0 or timestamp < 1e9:  # –ú–µ–Ω—å—à–µ 2001 –≥–æ–¥–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _execute_entry: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            else:
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _execute_entry: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            timestamp = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ø–æ–≤/ATR –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        stop_loss = signal.get('stop_loss') if isinstance(signal, dict) else None
        take_profit = signal.get('take_profit') if isinstance(signal, dict) else None
        risk_per_unit = 0.0
        if stop_loss and stop_loss > 0:
            risk_per_unit = (entry_price - stop_loss) if side == 'buy' else (stop_loss - entry_price)
            risk_per_unit = max(1e-9, risk_per_unit)
        # –û—Ü–µ–Ω–∫–∞ ATR –Ω–∞ –≤—Ö–æ–¥–µ –∏–∑ —Å—Ç–æ–ø‚Äë—Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        atr_entry = 0.0
        if risk_per_unit > 0 and self.config.atr_sl_multiplier > 0:
            atr_entry = risk_per_unit / self.config.atr_sl_multiplier
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        self.trade_counter += 1
        trade = BacktestTrade(
            id=self.trade_counter,
            symbol=symbol,
            side=side,
            entry_time=timestamp,
            entry_price=entry_price,
            quantity=position_size,
            commission=commission,
            strategy_type=signal.get('strategy_type', 'unknown'),
            confidence=signal.get('confidence', 0.5),
            stop_loss=stop_loss if (stop_loss and stop_loss > 0) else None,
            take_profit=take_profit if (take_profit and take_profit > 0) else None,
            risk_per_unit=risk_per_unit,
            trail_stop=stop_loss if (stop_loss and stop_loss > 0) else None,
            atr_at_entry=atr_entry
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
        self.current_capital -= required_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.open_positions[symbol] = trade
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞ –≤ —ç—Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É
        self._last_entry_time[le_key] = timestamp
        
        logger.debug(f"–í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {symbol} {side} @ ${entry_price:.2f}, —Ä–∞–∑–º–µ—Ä: {position_size:.6f}, —Ä–∏—Å–∫/–µ–¥: {risk_per_unit:.6f}")
    
    async def _calculate_position_size(self, symbol: str, signal, price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.config.position_sizing_method == "fixed_pct":
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            position_value = self.current_capital * self.config.position_size
            return position_value / price
            
        elif self.config.position_sizing_method == "risk_based":
            # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ (ATR-—Å—Ç–æ–ø)
            stop_loss = 0.0
            if isinstance(signal, dict):
                stop_loss = signal.get('stop_loss', 0.0) or 0.0
            risk_per_unit = 0.0
            side = signal.get('signal', 'buy') if isinstance(signal, dict) else 'buy'
            if stop_loss > 0.0:
                if side == 'buy':
                    risk_per_unit = max(1e-9, price - stop_loss)
                else:
                    risk_per_unit = max(1e-9, stop_loss - price)
            if risk_per_unit <= 0:
                # fallback –∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ü–µ–Ω—Ç—É
                position_value = self.current_capital * min(self.config.position_size, 0.05)
                return position_value / price
            # –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            tf_cur = getattr(self, '_current_timeframe', '1h')
            risk_pct = 0.007 if tf_cur in ['15m'] else (0.005 if tf_cur in ['5m'] else self.config.max_risk_per_trade)
            risk_capital = self.current_capital * risk_pct
            qty = risk_capital / risk_per_unit
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∫–∞–ø–∏—Ç–∞–ª—É
            max_affordable_qty = (self.current_capital * 0.98) / price
            return float(max(0.0, min(qty, max_affordable_qty)))
            
        else:  # fixed_amount
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            position_value = self.config.initial_capital * self.config.position_size
            return position_value / price
    
    def _apply_slippage(self, price: float, side: str) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è"""
        if side == 'buy':
            return price * (1 + self.config.slippage_rate)
        else:  # sell
            return price * (1 - self.config.slippage_rate)
    
    async def _check_exit_conditions(self, current_prices: Dict[str, float], timestamp):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞"""
        positions_to_close = []
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            if timestamp <= 0 or timestamp < 1e9:  # –ú–µ–Ω—å—à–µ 2001 –≥–æ–¥–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _check_exit_conditions: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            else:
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _check_exit_conditions: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            timestamp = datetime.now()
        
        for symbol, trade in list(self.open_positions.items()):
            if symbol not in current_prices:
                continue
            
            current_price = current_prices[symbol]
            side = trade.side
            
            # Time-based stop (–Ω–µ –¥–æ—Å—Ç–∏–≥ 0.5R –∑–∞ N –±–∞—Ä–æ–≤): 5m -> 12 –±–∞—Ä–æ–≤ (~1—á), 15m -> 8 –±–∞—Ä–æ–≤ (~2—á)
            try:
                tf_cur = getattr(self, '_current_timeframe', '1h')
                duration_hours = (timestamp - trade.entry_time).total_seconds() / 3600
                r_multiple = 0.0
                if trade.risk_per_unit > 0:
                    if side == 'buy':
                        r_multiple = (current_price - trade.entry_price) / trade.risk_per_unit
                    else:
                        r_multiple = (trade.entry_price - current_price) / trade.risk_per_unit
                if tf_cur == '5m' and duration_hours >= 1.0 and r_multiple < 0.5:
                    positions_to_close.append((symbol, current_price, 'time_stop_5m'))
                    continue
                if tf_cur == '15m' and duration_hours >= 2.0 and r_multiple < 0.5:
                    positions_to_close.append((symbol, current_price, 'time_stop_15m'))
                    continue

                # –î–ª—è SOL –Ω–∞ 1h ‚Äî –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º-—Å—Ç–æ–ø: 12 —á–∞—Å–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ 0.5R
                if tf_cur == '1h' and symbol.upper().startswith('SOL') and duration_hours >= 12.0 and r_multiple < 0.5:
                    positions_to_close.append((symbol, current_price, 'time_stop_SOL_1h'))
                    continue
            except Exception:
                pass
            
            # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—Å–ª–∞–±–ª–µ–Ω–∏–∏ –∏–º–ø—É–ª—å—Å–∞ MACD
            # –î–ª—è buy: macd_hist —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è < 0; –¥–ª—è sell: macd_hist > 0
            # RSI/BB –∫—Ä–∞–π: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            try:
                # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ä–∞ —Å–∏–º–≤–æ–ª–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á—ë—Ç)
                # –≤ —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –ø–æ —Å–∏–º–≤–æ–ª—É, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∫–µ—à–∞
                pass
            except Exception:
                pass
            
            # –¢—Ä–µ–π–ª–∏–Ω–≥ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∏–∂–µ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)
            # –¢—Ä–µ–π–ª–∏–Ω–≥‚Äë—Å—Ç–æ–ø: –æ–±–Ω–æ–≤–ª—è–µ–º trail_stop –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –ø—Ä–∏ –≤—Ö–æ–¥–µ (—É—Å–∏–ª–µ–Ω–Ω—ã–π –¥–ª—è 15m)
            tf_cur = getattr(self, '_current_timeframe', '1h')
            trail_mult = (1.6 if (tf_cur not in ['15m'] and symbol.upper().startswith('SOL')) else self.config.trail_atr_multiplier) if tf_cur not in ['15m'] else 1.4
            if self.config.enable_trailing and trade.atr_at_entry > 0:
                if side == 'buy':
                    new_trail = current_price - trail_mult * trade.atr_at_entry
                    trade.trail_stop = max(trade.trail_stop or float('-inf'), new_trail)
                else:
                    new_trail = current_price + trail_mult * trade.atr_at_entry
                    trade.trail_stop = min(trade.trail_stop or float('inf'), new_trail)
            
            # –°—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 1.5R –∏ 2.5R
            if self.config.enable_trailing and trade.risk_per_unit > 0:
                if side == 'buy':
                    current_r = (current_price - trade.entry_price) / trade.risk_per_unit
                else:
                    current_r = (trade.entry_price - current_price) / trade.risk_per_unit
                # –ü–µ—Ä–≤—ã–π –∞–ø–≥—Ä–µ–π–¥ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –ø–æ—Å–ª–µ 1.5R
                if current_r >= 1.5:
                    lvl1 = trade.entry_price + 0.5 * trade.risk_per_unit if side == 'buy' else trade.entry_price - 0.5 * trade.risk_per_unit
                    trade.trail_stop = max(trade.trail_stop or float('-inf'), lvl1) if side == 'buy' else min(trade.trail_stop or float('inf'), lvl1)
                # –í—Ç–æ—Ä–æ–π –∞–ø–≥—Ä–µ–π–¥ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –ø–æ—Å–ª–µ 2.5R
                if current_r >= 2.5:
                    lvl2 = trade.entry_price + 1.0 * trade.risk_per_unit if side == 'buy' else trade.entry_price - 1.0 * trade.risk_per_unit
                    trade.trail_stop = max(trade.trail_stop or float('-inf'), lvl2) if side == 'buy' else min(trade.trail_stop or float('inf'), lvl2)
            
            # –î–ª—è 5m —á—É—Ç—å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Ç—Ä–µ–π–ª–∏–Ω–≥
            if tf_cur in ['5m'] and trade.atr_at_entry > 0:
                if side == 'buy':
                    new_trail = current_price - 1.5 * trade.atr_at_entry
                    trade.trail_stop = max(trade.trail_stop or float('-inf'), new_trail)
                else:
                    new_trail = current_price + 1.5 * trade.atr_at_entry
                    trade.trail_stop = min(trade.trail_stop or float('inf'), new_trail)
            
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è (0.8R –Ω–∞ 15m)
            take_pct = self.config.partial_close_pct if tf_cur not in ['15m','5m'] else 0.4
            if self.config.enable_partial_take_profit and not trade.partial_taken and trade.risk_per_unit > 0:
                r_multiple = 0.0
                if side == 'buy':
                    r_multiple = (current_price - trade.entry_price) / trade.risk_per_unit
                else:
                    r_multiple = (trade.entry_price - current_price) / trade.risk_per_unit
                threshold_r = self.config.partial_take_profit_r
                if tf_cur in ['15m']:
                    threshold_r = 0.8
                if tf_cur in ['5m']:
                    threshold_r = 0.6  # —Ä–∞–Ω–Ω—è—è —Ñ–∏–∫—Å–∞—Ü–∏—è –Ω–∞ 5m
                    take_pct = 0.5
                if r_multiple >= threshold_r:
                    close_qty = trade.quantity * take_pct
                    close_qty = max(0.0, min(close_qty, trade.quantity))
                    if close_qty > 0:
                        # –†–µ–∞–ª–∏–∑—É–µ–º P&L –Ω–∞ —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                        exit_price_partial = self._apply_slippage(current_price, 'sell' if side == 'buy' else 'buy')
                        pnl_partial = (exit_price_partial - trade.entry_price) * close_qty if side == 'buy' else (trade.entry_price - exit_price_partial) * close_qty
                        exit_commission = close_qty * exit_price_partial * self.config.commission_rate
                        pnl_partial -= exit_commission
                        self.current_capital += (close_qty * exit_price_partial) + pnl_partial
                        trade.quantity -= close_qty
                        trade.commission += exit_commission
                        trade.pnl += pnl_partial
                        trade.partial_taken = True
                        trade.partial_scaled_qty = close_qty
                        # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–æ–ø–∞ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
                        if self.config.move_stop_to_be_on_partial:
                            trade.stop_loss = trade.entry_price
                            trade.trail_stop = trade.entry_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥‚Äë—Å—Ç–æ–ø
            if trade.trail_stop:
                if (side == 'buy' and current_price <= trade.trail_stop) or (side == 'sell' and current_price >= trade.trail_stop):
                    positions_to_close.append((symbol, current_price, "trailing_stop"))
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å
            if trade.stop_loss:
                if (side == 'buy' and current_price <= trade.stop_loss) or (side == 'sell' and current_price >= trade.stop_loss):
                    positions_to_close.append((symbol, current_price, "stop_loss"))
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫‚Äë–ø—Ä–æ—Ñ–∏—Ç
            if trade.take_profit:
                if (side == 'buy' and current_price >= trade.take_profit) or (side == 'sell' and current_price <= trade.take_profit):
                    positions_to_close.append((symbol, current_price, "take_profit"))
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏
            try:
                duration_hours = (timestamp - trade.entry_time).total_seconds() / 3600
                if duration_hours >= self.config.max_trade_duration:
                    positions_to_close.append((symbol, current_price, "time_limit"))
            except (AttributeError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for symbol, exit_price, reason in positions_to_close:
            await self._execute_exit(symbol, exit_price, timestamp, reason)
    
    def _check_stop_loss(self, trade: BacktestTrade, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if trade.side == 'buy':
            return current_price <= trade.stop_loss
        else:  # sell
            return current_price >= trade.stop_loss
    
    def _check_take_profit(self, trade: BacktestTrade, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if trade.side == 'buy':
            return current_price >= trade.take_profit
        else:  # sell
            return current_price <= trade.take_profit
    
    async def _execute_exit(self, symbol: str, exit_price: float, timestamp, reason: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.open_positions:
            return
        
        trade = self.open_positions[symbol]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        final_exit_price = self._apply_slippage(exit_price, 'sell' if trade.side == 'buy' else 'buy')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        if trade.side == 'buy':
            pnl = (final_exit_price - trade.entry_price) * trade.quantity
        else:  # sell
            pnl = (trade.entry_price - final_exit_price) * trade.quantity
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤—ã—Ö–æ–¥
        exit_commission = trade.quantity * final_exit_price * self.config.commission_rate
        pnl -= exit_commission
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            if timestamp <= 0 or timestamp < 1e9:  # –ú–µ–Ω—å—à–µ 2001 –≥–æ–¥–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _execute_exit: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            else:
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _execute_exit: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            timestamp = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
        trade.exit_time = timestamp
        trade.exit_price = final_exit_price
        trade.pnl = pnl
        trade.pnl_pct = pnl / (trade.entry_price * trade.quantity) * 100
        trade.commission += exit_commission
        trade.status = TradeStatus.CLOSED
        trade.exit_reason = reason
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
        self.current_capital += (trade.quantity * final_exit_price) + pnl
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        self.trades.append(trade)
        del self.open_positions[symbol]
        
        logger.debug(f"–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {symbol} @ ${final_exit_price:.2f}, "
                    f"P&L: ${pnl:.2f} ({trade.pnl_pct:.2f}%), –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    
    async def _close_all_positions(self, end_date: datetime):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Ü–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        for symbol in list(self.open_positions.keys()):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
            trade = self.open_positions[symbol]
            await self._execute_exit(symbol, trade.entry_price, end_date, "backtest_end")
    
    async def _update_portfolio_value(self, current_prices: Dict[str, float], timestamp: datetime):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_value = self.current_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        for symbol, trade in self.open_positions.items():
            if symbol in current_prices:
                current_price = current_prices[symbol]
                position_value = trade.quantity * current_price
                portfolio_value += position_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        self.risk_manager.update_portfolio_value(portfolio_value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if portfolio_value > self.peak_capital:
            self.peak_capital = portfolio_value
    
    def _record_equity_point(self, timestamp, current_prices: Dict[str, float]):
        """–ó–∞–ø–∏—Å—å —Ç–æ—á–∫–∏ –∫—Ä–∏–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª–∞"""
        portfolio_value = self.current_capital
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        for symbol, trade in self.open_positions.items():
            if symbol in current_prices:
                position_value = trade.quantity * current_prices[symbol]
                portfolio_value += position_value
        
        drawdown = (self.peak_capital - portfolio_value) / self.peak_capital if self.peak_capital > 0 else 0
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            if timestamp <= 0 or timestamp < 1e9:  # –ú–µ–Ω—å—à–µ 2001 –≥–æ–¥–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ _record_equity_point: {timestamp}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
                timestamp = datetime.now()
            else:
                timestamp = datetime.fromtimestamp(timestamp / 1000 if timestamp > 1e10 else timestamp)
        elif isinstance(timestamp, pd.Timestamp):
            timestamp = timestamp.to_pydatetime()
        elif not isinstance(timestamp, datetime):
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø timestamp –≤ _record_equity_point: {type(timestamp)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            timestamp = datetime.now()
        
        self.equity_curve.append({
            'timestamp': timestamp.isoformat(),
            'portfolio_value': portfolio_value,
            'cash': self.current_capital,
            'positions_value': portfolio_value - self.current_capital,
            'drawdown': drawdown,
            'open_positions': len(self.open_positions)
        })
    
    async def _calculate_metrics(self) -> BacktestMetrics:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if not self.trades:
            return BacktestMetrics(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        final_value = self.equity_curve[-1]['portfolio_value'] if self.equity_curve else self.current_capital
        total_return = final_value - self.config.initial_capital
        total_return_pct = (total_return / self.config.initial_capital) * 100
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        winning_trades = len([t for t in self.trades if t.pnl > 0])
        losing_trades = len([t for t in self.trades if t.pnl < 0])
        win_rate = winning_trades / len(self.trades) if self.trades else 0
        
        wins = [t.pnl for t in self.trades if t.pnl > 0]
        losses = [abs(t.pnl) for t in self.trades if t.pnl < 0]
        
        avg_win = np.mean(wins) if wins else 0
        avg_loss = np.mean(losses) if losses else 0
        largest_win = max(wins) if wins else 0
        largest_loss = max(losses) if losses else 0
        
        profit_factor = sum(wins) / sum(losses) if losses and sum(losses) > 0 else 0
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        durations = []
        for t in self.trades:
            if t.exit_time and t.entry_time:
                try:
                    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ - datetime –æ–±—ä–µ–∫—Ç—ã
                    if isinstance(t.entry_time, (int, float)):
                        entry_time = datetime.fromtimestamp(t.entry_time / 1000 if t.entry_time > 1e10 else t.entry_time)
                    else:
                        entry_time = t.entry_time
                    
                    if isinstance(t.exit_time, (int, float)):
                        exit_time = datetime.fromtimestamp(t.exit_time / 1000 if t.exit_time > 1e10 else t.exit_time)
                    else:
                        exit_time = t.exit_time
                    
                    duration_hours = (exit_time - entry_time).total_seconds() / 3600
                    durations.append(duration_hours)
                except (TypeError, AttributeError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
        avg_trade_duration = np.mean(durations) if durations else 0
        max_trade_duration = max(durations) if durations else 0
        min_trade_duration = min(durations) if durations else 0
        
        # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
        returns = [point['portfolio_value'] for point in self.equity_curve]
        if len(returns) > 1:
            pct_returns = [(returns[i] - returns[i-1]) / returns[i-1] for i in range(1, len(returns))]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedRiskManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VaR
            var_95 = await self.risk_manager.calculate_var(pct_returns, 0.95) if len(pct_returns) >= 30 else 0
            var_99 = await self.risk_manager.calculate_var(pct_returns, 0.99) if len(pct_returns) >= 30 else 0
            expected_shortfall = await self.risk_manager.calculate_expected_shortfall(pct_returns, 0.95) if len(pct_returns) >= 30 else 0
            
            volatility = np.std(pct_returns) * np.sqrt(252) if pct_returns else 0
            
            # Sharpe ratio
            risk_free_rate = self.config.risk_free_rate
            excess_return = (total_return_pct / 100) - risk_free_rate
            sharpe_ratio = excess_return / volatility if volatility > 0 else 0
            
            # Sortino ratio
            negative_returns = [r for r in pct_returns if r < 0]
            downside_volatility = np.std(negative_returns) * np.sqrt(252) if negative_returns else 0
            sortino_ratio = excess_return / downside_volatility if downside_volatility > 0 else 0
        else:
            var_95 = var_99 = expected_shortfall = volatility = 0
            sharpe_ratio = sortino_ratio = 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = max([point['drawdown'] for point in self.equity_curve]) if self.equity_curve else 0
        max_drawdown_pct = max_drawdown * 100
        
        # Calmar ratio
        calmar_ratio = (total_return_pct / 100) / max_drawdown if max_drawdown > 0 else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        recovery_factor = total_return / (max_drawdown * self.config.initial_capital) if max_drawdown > 0 else 0
        ulcer_index = 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        sterling_ratio = 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        return BacktestMetrics(
            total_return=total_return,
            total_return_pct=total_return_pct,
            sharpe_ratio=sharpe_ratio,
            sortino_ratio=sortino_ratio,
            calmar_ratio=calmar_ratio,
            max_drawdown=max_drawdown * self.config.initial_capital,
            max_drawdown_pct=max_drawdown_pct,
            total_trades=len(self.trades),
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            profit_factor=profit_factor,
            avg_win=avg_win,
            avg_loss=avg_loss,
            largest_win=largest_win,
            largest_loss=largest_loss,
            avg_trade_duration=avg_trade_duration,
            max_trade_duration=max_trade_duration,
            min_trade_duration=min_trade_duration,
            var_95=var_95,
            var_99=var_99,
            expected_shortfall=expected_shortfall,
            volatility=volatility,
            recovery_factor=recovery_factor,
            ulcer_index=ulcer_index,
            sterling_ratio=sterling_ratio
        )
    
    def _generate_summary(self, metrics: BacktestMetrics) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return {
            'performance': f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}% (${metrics.total_return:,.0f})",
            'risk': f"–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown_pct:.2f}%, Sharpe: {metrics.sharpe_ratio:.2f}",
            'trading': f"–°–¥–µ–ª–æ–∫: {metrics.total_trades}, –í–∏–Ω—Ä–µ–π—Ç: {metrics.win_rate:.1%}",
            'ratios': f"Profit Factor: {metrics.profit_factor:.2f}, Calmar: {metrics.calmar_ratio:.2f}"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
backtest_engine = BacktestEngine() 