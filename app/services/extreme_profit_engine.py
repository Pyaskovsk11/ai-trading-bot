"""
Extreme Profit Engine - –î–≤–∏–∂–æ–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
–¶–ï–õ–¨: 100% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 2-4 –Ω–µ–¥–µ–ª–∏
–†–ò–°–ö: –û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤!
"""

import logging
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class ExtremeMode(Enum):
    """–†–µ–∂–∏–º—ã —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    TURBO = "turbo"           # 50% –∑–∞ –Ω–µ–¥–µ–ª—é
    ROCKET = "rocket"         # 100% –∑–∞ 2 –Ω–µ–¥–µ–ª–∏  
    NUCLEAR = "nuclear"       # 200% –∑–∞ –º–µ—Å—è—Ü

@dataclass
class ExtremeSignal:
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
    signal: str                    # buy/sell/hold
    confidence: float              # 0.0-1.0
    entry_price: float
    leverage: float                # –ü–ª–µ—á–æ 1x-10x
    position_size: float           # 20-50% –∫–∞–ø–∏—Ç–∞–ª–∞
    stop_loss: float
    take_profit_1: float           # 10-20%
    take_profit_2: float           # 20-40%
    take_profit_3: float           # 40-80%
    trailing_stop: bool
    max_hold_time: int             # 2-24 —á–∞—Å–∞
    risk_reward_ratio: float       # –ú–∏–Ω–∏–º—É–º 1:5
    volatility_target: float       # –¶–µ–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    momentum_strength: float       # –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç—É–º–∞
    strategy_type: str
    reason: str
    metadata: Dict

class ExtremeProfitEngine:
    """
    –î–≤–∏–∂–æ–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100%+ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô –†–ò–°–ö!
    """
    
    def __init__(self, extreme_mode: ExtremeMode = ExtremeMode.ROCKET):
        self.extreme_mode = extreme_mode
        self.min_risk_reward_ratio = self._get_min_risk_reward_ratio()
        self.position_sizes = self._get_position_sizes()
        self.leverage_levels = self._get_leverage_levels()
        self.profit_targets = self._get_profit_targets()
        self.volatility_threshold = self._get_volatility_threshold()
        
        logger.warning(f"üö® ExtremeProfitEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ {extreme_mode.value}")
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –í–´–°–û–ö–ò–ô –†–ò–°–ö!")
    
    def _get_min_risk_reward_ratio(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        ratios = {
            ExtremeMode.TURBO: 3.0,     # 1:3 –º–∏–Ω–∏–º—É–º
            ExtremeMode.ROCKET: 5.0,    # 1:5 –º–∏–Ω–∏–º—É–º
            ExtremeMode.NUCLEAR: 8.0    # 1:8 –º–∏–Ω–∏–º—É–º
        }
        return ratios[self.extreme_mode]
    
    def _get_position_sizes(self) -> List[float]:
        """–†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        sizes = {
            ExtremeMode.TURBO: [0.20, 0.30, 0.40],      # 20-40% –∫–∞–ø–∏—Ç–∞–ª–∞
            ExtremeMode.ROCKET: [0.30, 0.40, 0.50],     # 30-50% –∫–∞–ø–∏—Ç–∞–ª–∞
            ExtremeMode.NUCLEAR: [0.40, 0.60, 0.80]     # 40-80% –∫–∞–ø–∏—Ç–∞–ª–∞
        }
        return sizes[self.extreme_mode]
    
    def _get_leverage_levels(self) -> List[float]:
        """–£—Ä–æ–≤–Ω–∏ –ø–ª–µ—á–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        leverage = {
            ExtremeMode.TURBO: [2.0, 3.0, 5.0],        # 2x-5x –ø–ª–µ—á–æ
            ExtremeMode.ROCKET: [3.0, 5.0, 8.0],       # 3x-8x –ø–ª–µ—á–æ
            ExtremeMode.NUCLEAR: [5.0, 8.0, 10.0]      # 5x-10x –ø–ª–µ—á–æ
        }
        return leverage[self.extreme_mode]
    
    def _get_profit_targets(self) -> List[float]:
        """–¶–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        targets = {
            ExtremeMode.TURBO: [0.10, 0.20, 0.35],     # 10%, 20%, 35%
            ExtremeMode.ROCKET: [0.15, 0.30, 0.50],    # 15%, 30%, 50%
            ExtremeMode.NUCLEAR: [0.25, 0.50, 0.80]    # 25%, 50%, 80%
        }
        return targets[self.extreme_mode]
    
    def _get_volatility_threshold(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞"""
        thresholds = {
            ExtremeMode.TURBO: 0.03,      # 3% –º–∏–Ω–∏–º—É–º
            ExtremeMode.ROCKET: 0.05,     # 5% –º–∏–Ω–∏–º—É–º
            ExtremeMode.NUCLEAR: 0.08     # 8% –º–∏–Ω–∏–º—É–º
        }
        return thresholds[self.extreme_mode]
    
    async def analyze_extreme_signal(self, 
                                   indicators: Dict, 
                                   market_regime: str, 
                                   price: float, 
                                   timestamp: datetime,
                                   volume_profile: Dict = None,
                                   news_sentiment: float = 0.0) -> Optional[ExtremeSignal]:
        """
        –ê–Ω–∞–ª–∏–∑ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            if not self._check_extreme_conditions(indicators, market_regime):
                return None
            
            # 2. –û—Ü–µ–Ω–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            extreme_score = self._assess_extreme_potential(indicators, market_regime, volume_profile, news_sentiment)
            
            if extreme_score['score'] < 80:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
                return None
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            signal_direction = self._determine_extreme_direction(indicators, market_regime, news_sentiment)
            
            if signal_direction == 'hold':
                return None
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            levels = self._calculate_extreme_levels(price, signal_direction, extreme_score)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            if levels['risk_reward_ratio'] < self.min_risk_reward_ratio:
                logger.debug(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–æ–µ R/R {levels['risk_reward_ratio']:.2f}")
                return None
            
            # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–ª–µ—á–æ
            position_params = self._calculate_position_parameters(extreme_score, levels)
            
            # 7. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
            max_hold_time = self._calculate_extreme_hold_time(extreme_score, market_regime)
            
            # 8. –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            extreme_signal = ExtremeSignal(
                signal=signal_direction,
                confidence=extreme_score['confidence'],
                entry_price=price,
                leverage=position_params['leverage'],
                position_size=position_params['position_size'],
                stop_loss=levels['stop_loss'],
                take_profit_1=levels['take_profit_1'],
                take_profit_2=levels['take_profit_2'],
                take_profit_3=levels['take_profit_3'],
                trailing_stop=True,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥
                max_hold_time=max_hold_time,
                risk_reward_ratio=levels['risk_reward_ratio'],
                volatility_target=indicators.get('volatility', 0.05),
                momentum_strength=extreme_score['momentum'],
                strategy_type=f"extreme_{self.extreme_mode.value}",
                reason=extreme_score['reason'],
                metadata={
                    'extreme_score': extreme_score,
                    'market_regime': market_regime,
                    'extreme_mode': self.extreme_mode.value,
                    'position_params': position_params,
                    'expected_profit': levels['expected_profit'],
                    'max_risk': levels['max_risk'],
                    'confidence_factors': extreme_score['factors']
                }
            )
            
            logger.warning(f"üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: {signal_direction} @ ${price:.2f}")
            logger.warning(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {levels['expected_profit']:.1f}%")
            logger.warning(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: {levels['max_risk']:.1f}%")
            logger.warning(f"üéØ R/R: {levels['risk_reward_ratio']:.1f}")
            logger.warning(f"üìä –ü–ª–µ—á–æ: {position_params['leverage']:.1f}x")
            
            return extreme_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    def _check_extreme_conditions(self, indicators: Dict, market_regime: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        
        # 1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = indicators.get('volatility', 0.01)
        if volatility < self.volatility_threshold:
            return False
        
        # 2. –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º
        volume_ratio = indicators.get('volume_ratio', 0.5)
        if volume_ratio < 1.5:  # –ú–∏–Ω–∏–º—É–º 1.5x —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            return False
        
        # 3. –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if market_regime in ['low_volatility', 'sideways_tight']:
            return False
        
        # 4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        rsi = indicators.get('rsi', 50)
        if 40 <= rsi <= 60:  # –ò–∑–±–µ–≥–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
            return False
        
        return True
    
    def _assess_extreme_potential(self, indicators: Dict, market_regime: str, 
                                volume_profile: Dict = None, news_sentiment: float = 0.0) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
        
        extreme_score = 0
        momentum_score = 0
        confidence_factors = []
        
        # 1. RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (25 –±–∞–ª–ª–æ–≤)
        rsi = indicators.get('rsi', 50)
        if rsi <= 20:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            extreme_score += 25
            momentum_score += 30
            confidence_factors.append(f"RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})")
        elif rsi >= 80:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            extreme_score += 25
            momentum_score += 30
            confidence_factors.append(f"RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})")
        elif rsi <= 25 or rsi >= 75:
            extreme_score += 15
            momentum_score += 20
            confidence_factors.append(f"RSI —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({rsi:.1f})")
        
        # 2. MACD —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (30 –±–∞–ª–ª–æ–≤)
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        prev_histogram = indicators.get('prev_macd_histogram', 0)
        
        # –°–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ MACD
        histogram_acceleration = abs(macd_histogram - prev_histogram)
        if histogram_acceleration > 0.001:  # –°–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            if macd > macd_signal and macd_histogram > prev_histogram:
                extreme_score += 30
                momentum_score += 40
                confidence_factors.append("MACD —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –±—ã—á—å–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            elif macd < macd_signal and macd_histogram < prev_histogram:
                extreme_score += 30
                momentum_score += 40
                confidence_factors.append("MACD —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –º–µ–¥–≤–µ–∂—å–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        
        # 3. Bollinger Bands –ø—Ä–æ—Ä—ã–≤—ã (20 –±–∞–ª–ª–æ–≤)
        bb_position = indicators.get('bb_position', 0.5)
        bb_width = indicators.get('bb_width', 0.04)
        
        if bb_width > 0.06:  # –®–∏—Ä–æ–∫–∏–µ –ø–æ–ª–æ—Å—ã = –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if bb_position < 0.05:  # –ü—Ä–æ—Ä—ã–≤ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                extreme_score += 20
                momentum_score += 25
                confidence_factors.append("–ü—Ä–æ—Ä—ã–≤ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
            elif bb_position > 0.95:  # –ü—Ä–æ—Ä—ã–≤ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                extreme_score += 20
                momentum_score += 25
                confidence_factors.append("–ü—Ä–æ—Ä—ã–≤ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        
        # 4. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (15 –±–∞–ª–ª–æ–≤)
        volatility = indicators.get('volatility', 0.02)
        if volatility > 0.08:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            extreme_score += 15
            momentum_score += 20
            confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility:.3f})")
        elif volatility > 0.05:
            extreme_score += 10
            momentum_score += 15
            confidence_factors.append(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility:.3f})")
        
        # 5. –û–±—ä–µ–º–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ (15 –±–∞–ª–ª–æ–≤)
        volume_ratio = indicators.get('volume_ratio', 1.0)
        if volume_ratio > 3.0:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            extreme_score += 15
            momentum_score += 20
            confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        elif volume_ratio > 2.0:
            extreme_score += 10
            momentum_score += 15
            confidence_factors.append(f"–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        
        # 6. –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–∏–ª–∞ (10 –±–∞–ª–ª–æ–≤)
        current_price = indicators.get('current_price', 0)
        ema_12 = indicators.get('ema_12', 0)
        ema_26 = indicators.get('ema_26', 0)
        sma_50 = indicators.get('sma_50', 0)
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ EMA
        if current_price > 0 and ema_12 > 0:
            price_ema_diff = abs(current_price - ema_12) / current_price
            if price_ema_diff > 0.05:  # 5%+ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
                extreme_score += 10
                momentum_score += 15
                confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å EMA ({price_ema_diff:.1%})")
        
        # 7. –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (–±–æ–Ω—É—Å 10 –±–∞–ª–ª–æ–≤)
        if abs(news_sentiment) > 0.7:  # –°–∏–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω
            extreme_score += 10
            momentum_score += 10
            confidence_factors.append(f"–°–∏–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç ({news_sentiment:.2f})")
        
        # 8. –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ)
        regime_multiplier = {
            'bull_breakout': 1.2,
            'bear_breakout': 1.2,
            'high_volatility': 1.1,
            'news_driven': 1.15,
            'sideways': 0.7,
            'low_volatility': 0.5
        }.get(market_regime, 1.0)
        
        extreme_score = int(extreme_score * regime_multiplier)
        momentum_score = int(momentum_score * regime_multiplier)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        extreme_score = max(0, min(100, extreme_score))
        momentum_score = max(0, min(100, momentum_score))
        confidence = extreme_score / 100.0
        
        return {
            'score': extreme_score,
            'momentum': momentum_score,
            'confidence': confidence,
            'reason': f"–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ ({extreme_score}): " + "; ".join(confidence_factors[:3]),
            'factors': confidence_factors,
            'regime_multiplier': regime_multiplier
        }
    
    def _determine_extreme_direction(self, indicators: Dict, market_regime: str, news_sentiment: float = 0.0) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        
        buy_signals = 0
        sell_signals = 0
        
        # RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        rsi = indicators.get('rsi', 50)
        if rsi <= 25:
            buy_signals += 4
        elif rsi >= 75:
            sell_signals += 4
        
        # MACD —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        prev_histogram = indicators.get('prev_macd_histogram', 0)
        
        if macd > macd_signal and macd_histogram > prev_histogram:
            buy_signals += 3
        elif macd < macd_signal and macd_histogram < prev_histogram:
            sell_signals += 3
        
        # Bollinger Bands –ø—Ä–æ—Ä—ã–≤—ã
        bb_position = indicators.get('bb_position', 0.5)
        if bb_position < 0.1:
            buy_signals += 2
        elif bb_position > 0.9:
            sell_signals += 2
        
        # –¢—Ä–µ–Ω–¥–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        current_price = indicators.get('current_price', 0)
        ema_12 = indicators.get('ema_12', 0)
        ema_26 = indicators.get('ema_26', 0)
        
        if current_price > ema_12 > ema_26:
            buy_signals += 2
        elif current_price < ema_12 < ema_26:
            sell_signals += 2
        
        # –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
        if news_sentiment > 0.5:
            buy_signals += 1
        elif news_sentiment < -0.5:
            sell_signals += 1
        
        # –¢—Ä–µ–±—É–µ–º –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        if buy_signals >= sell_signals + 4:
            return 'buy'
        elif sell_signals >= buy_signals + 4:
            return 'sell'
        else:
            return 'hold'
    
    def _calculate_extreme_levels(self, price: float, signal_direction: str, extreme_score: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        score_multiplier = 0.8 + (extreme_score['confidence'] * 0.4)  # 0.8-1.2
        momentum_multiplier = 0.9 + (extreme_score['momentum'] / 100.0 * 0.3)  # 0.9-1.2
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        base_stop_loss_pct = 0.03  # 3% —Å—Ç–æ–ø-–ª–æ—Å—Å (–≤—ã—à–µ –∏–∑-–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        stop_loss_pct = base_stop_loss_pct * score_multiplier
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
        profit_targets = [
            self.profit_targets[0] * momentum_multiplier,  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            self.profit_targets[1] * momentum_multiplier,  # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å  
            self.profit_targets[2] * momentum_multiplier   # –¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å
        ]
        
        if signal_direction == 'buy':
            stop_loss = price * (1 - stop_loss_pct)
            take_profit_1 = price * (1 + profit_targets[0])
            take_profit_2 = price * (1 + profit_targets[1])
            take_profit_3 = price * (1 + profit_targets[2])
        else:  # sell
            stop_loss = price * (1 + stop_loss_pct)
            take_profit_1 = price * (1 - profit_targets[0])
            take_profit_2 = price * (1 - profit_targets[1])
            take_profit_3 = price * (1 - profit_targets[2])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk = abs(price - stop_loss)
        reward = abs(take_profit_1 - price)
        risk_reward_ratio = reward / risk if risk > 0 else 0
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∏—Å–∫
        expected_profit = profit_targets[0] * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        max_risk = stop_loss_pct * 100
        
        return {
            'stop_loss': stop_loss,
            'take_profit_1': take_profit_1,
            'take_profit_2': take_profit_2,
            'take_profit_3': take_profit_3,
            'risk_reward_ratio': risk_reward_ratio,
            'expected_profit': expected_profit,
            'max_risk': max_risk,
            'profit_targets': profit_targets,
            'stop_loss_pct': stop_loss_pct
        }
    
    def _calculate_position_parameters(self, extreme_score: Dict, levels: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ (—Ä–∞–∑–º–µ—Ä –∏ –ø–ª–µ—á–æ)"""
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = extreme_score['confidence']
        momentum = extreme_score['momentum'] / 100.0
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        if confidence > 0.9 and momentum > 0.8:
            position_size = self.position_sizes[2]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[2]      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
        elif confidence > 0.8 and momentum > 0.6:
            position_size = self.position_sizes[1]  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[1]      # –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ
        else:
            position_size = self.position_sizes[0]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[0]      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        rr_ratio = levels['risk_reward_ratio']
        if rr_ratio > 8.0:  # –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            position_size *= 1.2
            leverage *= 1.1
        elif rr_ratio > 6.0:
            position_size *= 1.1
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        position_size = min(position_size, 0.8)  # –ú–∞–∫—Å–∏–º—É–º 80% –∫–∞–ø–∏—Ç–∞–ª–∞
        leverage = min(leverage, 10.0)           # –ú–∞–∫—Å–∏–º—É–º 10x –ø–ª–µ—á–æ
        
        return {
            'position_size': position_size,
            'leverage': leverage,
            'effective_exposure': position_size * leverage  # –†–µ–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è
        }
    
    def _calculate_extreme_hold_time(self, extreme_score: Dict, market_regime: str) -> int:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        
        base_hours = {
            ExtremeMode.TURBO: 6,      # 6 —á–∞—Å–æ–≤
            ExtremeMode.ROCKET: 4,     # 4 —á–∞—Å–∞
            ExtremeMode.NUCLEAR: 2     # 2 —á–∞—Å–∞
        }
        
        base_time = base_hours[self.extreme_mode]
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–º–µ–Ω—Ç—É–º–∞
        momentum_multiplier = 0.5 + (extreme_score['momentum'] / 100.0)  # 0.5-1.5
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        regime_multiplier = {
            'bull_breakout': 1.5,
            'bear_breakout': 1.5,
            'high_volatility': 0.8,
            'news_driven': 0.6
        }.get(market_regime, 1.0)
        
        max_hours = int(base_time * momentum_multiplier * regime_multiplier)
        return max(1, min(24, max_hours))  # –û—Ç 1 —á–∞—Å–∞ –¥–æ —Å—É—Ç–æ–∫
    
    def get_extreme_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return {
            'extreme_mode': self.extreme_mode.value,
            'target_weekly_return': self._get_target_weekly_return(),
            'min_risk_reward_ratio': self.min_risk_reward_ratio,
            'position_sizes': self.position_sizes,
            'leverage_levels': self.leverage_levels,
            'profit_targets': self.profit_targets,
            'volatility_threshold': self.volatility_threshold,
            'expected_win_rate': self._get_expected_win_rate(),
            'max_drawdown_risk': self._get_max_drawdown_risk(),
            'warning': "‚ö†Ô∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –í–´–°–û–ö–ò–ô –†–ò–°–ö!"
        }
    
    def _get_target_weekly_return(self) -> float:
        """–¶–µ–ª–µ–≤–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        targets = {
            ExtremeMode.TURBO: 0.50,     # 50% –≤ –Ω–µ–¥–µ–ª—é
            ExtremeMode.ROCKET: 0.75,    # 75% –≤ –Ω–µ–¥–µ–ª—é (100% –∑–∞ 2 –Ω–µ–¥–µ–ª–∏)
            ExtremeMode.NUCLEAR: 1.00    # 100% –≤ –Ω–µ–¥–µ–ª—é
        }
        return targets[self.extreme_mode]
    
    def _get_expected_win_rate(self) -> float:
        """–û–∂–∏–¥–∞–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        rates = {
            ExtremeMode.TURBO: 0.40,     # 40%
            ExtremeMode.ROCKET: 0.35,    # 35%
            ExtremeMode.NUCLEAR: 0.30    # 30%
        }
        return rates[self.extreme_mode]
    
    def _get_max_drawdown_risk(self) -> float:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        risks = {
            ExtremeMode.TURBO: 0.30,     # 30%
            ExtremeMode.ROCKET: 0.50,    # 50%
            ExtremeMode.NUCLEAR: 0.70    # 70%
        }
        return risks[self.extreme_mode]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
turbo_engine = ExtremeProfitEngine(ExtremeMode.TURBO)
rocket_engine = ExtremeProfitEngine(ExtremeMode.ROCKET)
nuclear_engine = ExtremeProfitEngine(ExtremeMode.NUCLEAR) 