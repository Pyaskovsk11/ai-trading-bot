"""
NUCLEAR Trading Engine - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –¥–ª—è 100% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô –†–ò–°–ö! –¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤!
–¶–ï–õ–¨: 100% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 2-4 –Ω–µ–¥–µ–ª–∏
"""

import logging
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import asyncio
import json

logger = logging.getLogger(__name__)

class NuclearMode(Enum):
    """–†–µ–∂–∏–º—ã NUCLEAR —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    FUSION = "fusion"         # 200% –∑–∞ –º–µ—Å—è—Ü
    FISSION = "fission"       # 500% –∑–∞ –º–µ—Å—è—Ü  
    ANTIMATTER = "antimatter" # 1000% –∑–∞ –º–µ—Å—è—Ü (–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –û–ü–ê–°–ù–û!)

@dataclass
class NuclearSignal:
    """–Ø–¥–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
    signal: str                    # buy/sell/hold
    confidence: float              # 0.95-1.0 (—Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—á–∞–π—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
    entry_price: float
    leverage: float                # 10x-50x –ø–ª–µ—á–æ
    position_size: float           # 50-95% –∫–∞–ø–∏—Ç–∞–ª–∞
    stop_loss: float
    take_profit_1: float           # 25-50%
    take_profit_2: float           # 50-100%
    take_profit_3: float           # 100-200%
    trailing_stop: bool
    max_hold_time: int             # 30 –º–∏–Ω—É—Ç - 4 —á–∞—Å–∞
    risk_reward_ratio: float       # –ú–∏–Ω–∏–º—É–º 1:10
    volatility_target: float       # –¶–µ–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å >20%
    momentum_strength: float       # –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç—É–º–∞ >90
    strategy_type: str
    reason: str
    nuclear_score: float           # 95-100 –±–∞–ª–ª–æ–≤
    metadata: Dict

class NuclearTradingEngine:
    """
    NUCLEAR Trading Engine - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–û–õ–ù–û–ô –ü–û–¢–ï–†–ò –ö–ê–ü–ò–¢–ê–õ–ê!
    """
    
    def __init__(self, nuclear_mode: NuclearMode = NuclearMode.FUSION):
        self.nuclear_mode = nuclear_mode
        self.min_nuclear_score = self._get_min_nuclear_score()
        self.min_risk_reward_ratio = self._get_min_risk_reward_ratio()
        self.position_sizes = self._get_position_sizes()
        self.leverage_levels = self._get_leverage_levels()
        self.profit_targets = self._get_profit_targets()
        self.volatility_threshold = self._get_volatility_threshold()
        self.confidence_threshold = self._get_confidence_threshold()
        
        logger.warning(f"üö® NUCLEAR Trading Engine –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ {nuclear_mode.value}")
        logger.warning("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–û–õ–ù–û–ô –ü–û–¢–ï–†–ò –ö–ê–ü–ò–¢–ê–õ–ê!")
    
    def _get_min_nuclear_score(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —è–¥–µ—Ä–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –≤—Ö–æ–¥–∞"""
        scores = {
            NuclearMode.FUSION: 95.0,      # –¢–æ–ø 5% —Å–∏–≥–Ω–∞–ª–æ–≤
            NuclearMode.FISSION: 97.0,     # –¢–æ–ø 3% —Å–∏–≥–Ω–∞–ª–æ–≤
            NuclearMode.ANTIMATTER: 99.0   # –¢–æ–ø 1% —Å–∏–≥–Ω–∞–ª–æ–≤
        }
        return scores[self.nuclear_mode]
    
    def _get_min_risk_reward_ratio(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"""
        ratios = {
            NuclearMode.FUSION: 10.0,      # 1:10 –º–∏–Ω–∏–º—É–º
            NuclearMode.FISSION: 15.0,     # 1:15 –º–∏–Ω–∏–º—É–º
            NuclearMode.ANTIMATTER: 20.0   # 1:20 –º–∏–Ω–∏–º—É–º
        }
        return ratios[self.nuclear_mode]
    
    def _get_position_sizes(self) -> List[float]:
        """–†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —è–¥–µ—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        sizes = {
            NuclearMode.FUSION: [0.50, 0.70, 0.80],        # 50-80% –∫–∞–ø–∏—Ç–∞–ª–∞
            NuclearMode.FISSION: [0.70, 0.85, 0.95],       # 70-95% –∫–∞–ø–∏—Ç–∞–ª–∞
            NuclearMode.ANTIMATTER: [0.90, 0.95, 0.99]     # 90-99% –∫–∞–ø–∏—Ç–∞–ª–∞
        }
        return sizes[self.nuclear_mode]
    
    def _get_leverage_levels(self) -> List[float]:
        """–£—Ä–æ–≤–Ω–∏ –ø–ª–µ—á–∞ –¥–ª—è —è–¥–µ—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        leverage = {
            NuclearMode.FUSION: [10.0, 20.0, 30.0],        # 10x-30x –ø–ª–µ—á–æ
            NuclearMode.FISSION: [20.0, 35.0, 50.0],       # 20x-50x –ø–ª–µ—á–æ
            NuclearMode.ANTIMATTER: [30.0, 50.0, 100.0]    # 30x-100x –ø–ª–µ—á–æ
        }
        return leverage[self.nuclear_mode]
    
    def _get_profit_targets(self) -> List[float]:
        """–¶–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏–±—ã–ª–∏"""
        targets = {
            NuclearMode.FUSION: [0.25, 0.50, 1.00],        # 25%, 50%, 100%
            NuclearMode.FISSION: [0.50, 1.00, 2.00],       # 50%, 100%, 200%
            NuclearMode.ANTIMATTER: [1.00, 2.00, 5.00]     # 100%, 200%, 500%
        }
        return targets[self.nuclear_mode]
    
    def _get_volatility_threshold(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞"""
        thresholds = {
            NuclearMode.FUSION: 0.15,      # 15% –º–∏–Ω–∏–º—É–º
            NuclearMode.FISSION: 0.20,     # 20% –º–∏–Ω–∏–º—É–º
            NuclearMode.ANTIMATTER: 0.30   # 30% –º–∏–Ω–∏–º—É–º
        }
        return thresholds[self.nuclear_mode]
    
    def _get_confidence_threshold(self) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞"""
        thresholds = {
            NuclearMode.FUSION: 0.95,      # 95% –º–∏–Ω–∏–º—É–º
            NuclearMode.FISSION: 0.97,     # 97% –º–∏–Ω–∏–º—É–º
            NuclearMode.ANTIMATTER: 0.99   # 99% –º–∏–Ω–∏–º—É–º
        }
        return thresholds[self.nuclear_mode]
    
    async def analyze_nuclear_signal(self, 
                                   indicators: Dict, 
                                   market_regime: str, 
                                   price: float, 
                                   timestamp: datetime,
                                   volume_profile: Dict = None,
                                   news_sentiment: float = 0.0,
                                   social_sentiment: float = 0.0,
                                   whale_activity: float = 0.0) -> Optional[NuclearSignal]:
        """
        –ê–Ω–∞–ª–∏–∑ —è–¥–µ—Ä–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —è–¥–µ—Ä–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            if not self._check_nuclear_conditions(indicators, market_regime):
                return None
            
            # 2. –û—Ü–µ–Ω–∫–∞ —è–¥–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ (100-–±–∞–ª–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
            nuclear_analysis = self._assess_nuclear_potential(
                indicators, market_regime, volume_profile, 
                news_sentiment, social_sentiment, whale_activity
            )
            
            if nuclear_analysis['nuclear_score'] < self.min_nuclear_score:
                logger.debug(f"–Ø–¥–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∏–π —Å—á–µ—Ç {nuclear_analysis['nuclear_score']:.1f}")
                return None
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞
            signal_direction = self._determine_nuclear_direction(
                indicators, market_regime, news_sentiment, social_sentiment
            )
            
            if signal_direction == 'hold':
                return None
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —è–¥–µ—Ä–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            levels = self._calculate_nuclear_levels(price, signal_direction, nuclear_analysis)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            if levels['risk_reward_ratio'] < self.min_risk_reward_ratio:
                logger.debug(f"–Ø–¥–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–æ–µ R/R {levels['risk_reward_ratio']:.2f}")
                return None
            
            # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–ª–µ—á–æ
            position_params = self._calculate_nuclear_position_parameters(nuclear_analysis, levels)
            
            # 7. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
            max_hold_time = self._calculate_nuclear_hold_time(nuclear_analysis, market_regime)
            
            # 8. –°–æ–∑–¥–∞–µ–º —è–¥–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            nuclear_signal = NuclearSignal(
                signal=signal_direction,
                confidence=nuclear_analysis['confidence'],
                entry_price=price,
                leverage=position_params['leverage'],
                position_size=position_params['position_size'],
                stop_loss=levels['stop_loss'],
                take_profit_1=levels['take_profit_1'],
                take_profit_2=levels['take_profit_2'],
                take_profit_3=levels['take_profit_3'],
                trailing_stop=True,
                max_hold_time=max_hold_time,
                risk_reward_ratio=levels['risk_reward_ratio'],
                volatility_target=indicators.get('volatility', 0.20),
                momentum_strength=nuclear_analysis['momentum'],
                strategy_type=f"nuclear_{self.nuclear_mode.value}",
                reason=nuclear_analysis['reason'],
                nuclear_score=nuclear_analysis['nuclear_score'],
                metadata={
                    'nuclear_analysis': nuclear_analysis,
                    'market_regime': market_regime,
                    'nuclear_mode': self.nuclear_mode.value,
                    'position_params': position_params,
                    'expected_profit': levels['expected_profit'],
                    'max_risk': levels['max_risk'],
                    'confidence_factors': nuclear_analysis['factors'],
                    'timestamp': timestamp.isoformat()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ timestamp
                }
            )
            
            logger.warning(f"‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –°–ò–ì–ù–ê–õ: {signal_direction} @ ${price:.2f}")
            logger.warning(f"üí• –Ø–¥–µ—Ä–Ω—ã–π —Å—á–µ—Ç: {nuclear_analysis['nuclear_score']:.1f}/100")
            logger.warning(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {levels['expected_profit']:.1f}%")
            logger.warning(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: {levels['max_risk']:.1f}%")
            logger.warning(f"üéØ R/R: {levels['risk_reward_ratio']:.1f}")
            logger.warning(f"üìä –ü–ª–µ—á–æ: {position_params['leverage']:.1f}x")
            logger.warning(f"üí£ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_params['position_size']:.1%}")
            
            return nuclear_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —è–¥–µ—Ä–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    def _check_nuclear_conditions(self, indicators: Dict, market_regime: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —è–¥–µ—Ä–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        
        # 1. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = indicators.get('volatility', 0.01)
        if volatility < self.volatility_threshold:
            return False
        
        # 2. –ú–∞—Å—Å–∏–≤–Ω—ã–π –æ–±—ä–µ–º
        volume_ratio = indicators.get('volume_ratio', 0.5)
        if volume_ratio < 3.0:  # –ú–∏–Ω–∏–º—É–º 3x —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            return False
        
        # 3. –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if market_regime in ['low_volatility', 'sideways_tight', 'consolidation']:
            return False
        
        # 4. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        rsi = indicators.get('rsi', 50)
        if 30 <= rsi <= 70:  # –¢–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            return False
        
        # 5. MACD —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        macd_histogram = indicators.get('macd_histogram', 0)
        prev_histogram = indicators.get('prev_macd_histogram', 0)
        histogram_acceleration = abs(macd_histogram - prev_histogram)
        if histogram_acceleration < 0.002:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            return False
        
        return True
    
    def _assess_nuclear_potential(self, indicators: Dict, market_regime: str, 
                                volume_profile: Dict = None, news_sentiment: float = 0.0,
                                social_sentiment: float = 0.0, whale_activity: float = 0.0) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ —è–¥–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ (100-–±–∞–ª–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
        
        nuclear_score = 0
        momentum_score = 0
        confidence_factors = []
        
        # 1. RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (20 –±–∞–ª–ª–æ–≤)
        rsi = indicators.get('rsi', 50)
        if rsi <= 15:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            nuclear_score += 20
            momentum_score += 25
            confidence_factors.append(f"RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})")
        elif rsi >= 85:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            nuclear_score += 20
            momentum_score += 25
            confidence_factors.append(f"RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})")
        elif rsi <= 20 or rsi >= 80:
            nuclear_score += 15
            momentum_score += 20
            confidence_factors.append(f"RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({rsi:.1f})")
        
        # 2. MACD —è–¥–µ—Ä–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (25 –±–∞–ª–ª–æ–≤)
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        prev_histogram = indicators.get('prev_macd_histogram', 0)
        
        histogram_acceleration = abs(macd_histogram - prev_histogram)
        if histogram_acceleration > 0.005:  # –Ø–¥–µ—Ä–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            if macd > macd_signal and macd_histogram > prev_histogram:
                nuclear_score += 25
                momentum_score += 30
                confidence_factors.append("MACD —è–¥–µ—Ä–Ω–æ–µ –±—ã—á—å–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            elif macd < macd_signal and macd_histogram < prev_histogram:
                nuclear_score += 25
                momentum_score += 30
                confidence_factors.append("MACD —è–¥–µ—Ä–Ω–æ–µ –º–µ–¥–≤–µ–∂—å–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        elif histogram_acceleration > 0.003:
            nuclear_score += 15
            momentum_score += 20
            confidence_factors.append("MACD —Å–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        
        # 3. Bollinger Bands —è–¥–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ä—ã–≤—ã (15 –±–∞–ª–ª–æ–≤)
        bb_position = indicators.get('bb_position', 0.5)
        bb_width = indicators.get('bb_width', 0.04)
        
        if bb_width > 0.15:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–∏–µ –ø–æ–ª–æ—Å—ã
            if bb_position < 0.02:  # –Ø–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ä—ã–≤ –≤–Ω–∏–∑
                nuclear_score += 15
                momentum_score += 20
                confidence_factors.append("–Ø–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ä—ã–≤ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB")
            elif bb_position > 0.98:  # –Ø–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ä—ã–≤ –≤–≤–µ—Ä—Ö
                nuclear_score += 15
                momentum_score += 20
                confidence_factors.append("–Ø–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ä—ã–≤ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB")
        
        # 4. –Ø–¥–µ—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (15 –±–∞–ª–ª–æ–≤)
        volatility = indicators.get('volatility', 0.02)
        if volatility > 0.25:  # –Ø–¥–µ—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            nuclear_score += 15
            momentum_score += 20
            confidence_factors.append(f"–Ø–¥–µ—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility:.3f})")
        elif volatility > 0.15:
            nuclear_score += 10
            momentum_score += 15
            confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility:.3f})")
        
        # 5. –û–±—ä–µ–º–Ω—ã–µ —è–¥–µ—Ä–Ω—ã–µ –≤–∑—Ä—ã–≤—ã (15 –±–∞–ª–ª–æ–≤)
        volume_ratio = indicators.get('volume_ratio', 1.0)
        if volume_ratio > 10.0:  # –Ø–¥–µ—Ä–Ω—ã–π –æ–±—ä–µ–º
            nuclear_score += 15
            momentum_score += 20
            confidence_factors.append(f"–Ø–¥–µ—Ä–Ω—ã–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        elif volume_ratio > 5.0:
            nuclear_score += 10
            momentum_score += 15
            confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
        
        # 6. –ù–æ–≤–æ—Å—Ç–Ω–æ–π —è–¥–µ—Ä–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (10 –±–∞–ª–ª–æ–≤)
        if abs(news_sentiment) > 0.8:  # –Ø–¥–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            nuclear_score += 10
            momentum_score += 15
            confidence_factors.append(f"–Ø–¥–µ—Ä–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç ({news_sentiment:.2f})")
        elif abs(news_sentiment) > 0.6:
            nuclear_score += 5
            momentum_score += 10
            confidence_factors.append(f"–°–∏–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç ({news_sentiment:.2f})")
        
        # 7. –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —è–¥–µ—Ä–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (–±–æ–Ω—É—Å 5 –±–∞–ª–ª–æ–≤)
        if abs(social_sentiment) > 0.8:
            nuclear_score += 5
            momentum_score += 10
            confidence_factors.append(f"–Ø–¥–µ—Ä–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç ({social_sentiment:.2f})")
        
        # 8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ (–±–æ–Ω—É—Å 5 –±–∞–ª–ª–æ–≤)
        if whale_activity > 0.8:
            nuclear_score += 5
            momentum_score += 10
            confidence_factors.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ ({whale_activity:.2f})")
        
        # 9. –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–º–Ω–æ–∂–∏—Ç–µ–ª—å)
        regime_multiplier = {
            'nuclear_breakout': 1.3,
            'extreme_volatility': 1.2,
            'news_explosion': 1.25,
            'whale_movement': 1.15,
            'flash_crash': 1.2,
            'parabolic_move': 1.3
        }.get(market_regime, 1.0)
        
        nuclear_score = int(nuclear_score * regime_multiplier)
        momentum_score = int(momentum_score * regime_multiplier)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        nuclear_score = max(0, min(100, nuclear_score))
        momentum_score = max(0, min(100, momentum_score))
        confidence = nuclear_score / 100.0
        
        return {
            'nuclear_score': nuclear_score,
            'momentum': momentum_score,
            'confidence': confidence,
            'reason': f"–Ø–î–ï–†–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ ({nuclear_score}): " + "; ".join(confidence_factors[:3]),
            'factors': confidence_factors,
            'regime_multiplier': regime_multiplier
        }
    
    def _determine_nuclear_direction(self, indicators: Dict, market_regime: str, 
                                   news_sentiment: float = 0.0, social_sentiment: float = 0.0) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–¥–µ—Ä–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞"""
        
        buy_signals = 0
        sell_signals = 0
        
        # RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (–≤–µ—Å 5)
        rsi = indicators.get('rsi', 50)
        if rsi <= 20:
            buy_signals += 5
        elif rsi >= 80:
            sell_signals += 5
        
        # MACD —è–¥–µ—Ä–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–≤–µ—Å 4)
        macd = indicators.get('macd', 0)
        macd_signal = indicators.get('macd_signal', 0)
        macd_histogram = indicators.get('macd_histogram', 0)
        prev_histogram = indicators.get('prev_macd_histogram', 0)
        
        if macd > macd_signal and macd_histogram > prev_histogram:
            buy_signals += 4
        elif macd < macd_signal and macd_histogram < prev_histogram:
            sell_signals += 4
        
        # Bollinger Bands –ø—Ä–æ—Ä—ã–≤—ã (–≤–µ—Å 3)
        bb_position = indicators.get('bb_position', 0.5)
        if bb_position < 0.05:
            buy_signals += 3
        elif bb_position > 0.95:
            sell_signals += 3
        
        # –¢—Ä–µ–Ω–¥–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–µ—Å 3)
        current_price = indicators.get('current_price', 0)
        ema_12 = indicators.get('ema_12', 0)
        ema_26 = indicators.get('ema_26', 0)
        
        if current_price > ema_12 > ema_26:
            buy_signals += 3
        elif current_price < ema_12 < ema_26:
            sell_signals += 3
        
        # –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (–≤–µ—Å 2)
        if news_sentiment > 0.6:
            buy_signals += 2
        elif news_sentiment < -0.6:
            sell_signals += 2
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (–≤–µ—Å 1)
        if social_sentiment > 0.6:
            buy_signals += 1
        elif social_sentiment < -0.6:
            sell_signals += 1
        
        # –¢—Ä–µ–±—É–µ–º –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —è–¥–µ—Ä–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        if buy_signals >= sell_signals + 6:
            return 'buy'
        elif sell_signals >= buy_signals + 6:
            return 'sell'
        else:
            return 'hold'
    
    def _calculate_nuclear_levels(self, price: float, signal_direction: str, nuclear_analysis: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —è–¥–µ—Ä–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        score_multiplier = 0.9 + (nuclear_analysis['confidence'] * 0.3)  # 0.9-1.2
        momentum_multiplier = 0.95 + (nuclear_analysis['momentum'] / 100.0 * 0.25)  # 0.95-1.2
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —è–¥–µ—Ä–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        base_stop_loss_pct = 0.02  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å (—Ç–∞–π—Ç–æ–≤—ã–π –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ –ø–ª–µ—á–∞)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        stop_loss_pct = base_stop_loss_pct * score_multiplier
        
        # –Ø–¥–µ—Ä–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
        profit_targets = [
            self.profit_targets[0] * momentum_multiplier,  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            self.profit_targets[1] * momentum_multiplier,  # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å  
            self.profit_targets[2] * momentum_multiplier   # –¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å
        ]
        
        if signal_direction == 'buy':
            stop_loss = price * (1 - stop_loss_pct)
            take_profit_1 = price * (1 + profit_targets[0])
            take_profit_2 = price * (1 + profit_targets[1])
            take_profit_3 = price * (1 + profit_targets[2])
        else:  # sell
            stop_loss = price * (1 + stop_loss_pct)
            take_profit_1 = price * (1 - profit_targets[0])
            take_profit_2 = price * (1 - profit_targets[1])
            take_profit_3 = price * (1 - profit_targets[2])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk = abs(price - stop_loss)
        reward = abs(take_profit_1 - price)
        risk_reward_ratio = reward / risk if risk > 0 else 0
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∏—Å–∫
        expected_profit = profit_targets[0] * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        max_risk = stop_loss_pct * 100
        
        return {
            'stop_loss': stop_loss,
            'take_profit_1': take_profit_1,
            'take_profit_2': take_profit_2,
            'take_profit_3': take_profit_3,
            'risk_reward_ratio': risk_reward_ratio,
            'expected_profit': expected_profit,
            'max_risk': max_risk,
            'profit_targets': profit_targets,
            'stop_loss_pct': stop_loss_pct
        }
    
    def _calculate_nuclear_position_parameters(self, nuclear_analysis: Dict, levels: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è–¥–µ—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥–µ—Ä–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        nuclear_score = nuclear_analysis['nuclear_score']
        confidence = nuclear_analysis['confidence']
        momentum = nuclear_analysis['momentum'] / 100.0
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥–µ—Ä–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        if nuclear_score >= 99 and confidence > 0.98:
            position_size = self.position_sizes[2]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[2]      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
        elif nuclear_score >= 97 and confidence > 0.96:
            position_size = self.position_sizes[1]  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[1]      # –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ
        else:
            position_size = self.position_sizes[0]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            leverage = self.leverage_levels[0]      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        rr_ratio = levels['risk_reward_ratio']
        if rr_ratio > 20.0:  # –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            position_size *= 1.1
            leverage *= 1.05
        elif rr_ratio > 15.0:
            position_size *= 1.05
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–∞–∂–µ –¥–ª—è —è–¥–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        position_size = min(position_size, 0.99)  # –ú–∞–∫—Å–∏–º—É–º 99% –∫–∞–ø–∏—Ç–∞–ª–∞
        leverage = min(leverage, 100.0)           # –ú–∞–∫—Å–∏–º—É–º 100x –ø–ª–µ—á–æ
        
        return {
            'position_size': position_size,
            'leverage': leverage,
            'effective_exposure': position_size * leverage  # –†–µ–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è
        }
    
    def _calculate_nuclear_hold_time(self, nuclear_analysis: Dict, market_regime: str) -> int:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è —è–¥–µ—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)"""
        
        base_minutes = {
            NuclearMode.FUSION: 120,       # 2 —á–∞—Å–∞
            NuclearMode.FISSION: 60,       # 1 —á–∞—Å
            NuclearMode.ANTIMATTER: 30     # 30 –º–∏–Ω—É—Ç
        }
        
        base_time = base_minutes[self.nuclear_mode]
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥–µ—Ä–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        score_multiplier = 0.5 + (nuclear_analysis['nuclear_score'] / 100.0)  # 0.5-1.5
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        regime_multiplier = {
            'nuclear_breakout': 2.0,
            'extreme_volatility': 0.5,
            'news_explosion': 0.3,
            'flash_crash': 0.2
        }.get(market_regime, 1.0)
        
        max_minutes = int(base_time * score_multiplier * regime_multiplier)
        return max(15, min(240, max_minutes))  # –û—Ç 15 –º–∏–Ω—É—Ç –¥–æ 4 —á–∞—Å–æ–≤
    
    def get_nuclear_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è–¥–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return {
            'nuclear_mode': self.nuclear_mode.value,
            'target_monthly_return': self._get_target_monthly_return(),
            'min_nuclear_score': self.min_nuclear_score,
            'min_risk_reward_ratio': self.min_risk_reward_ratio,
            'position_sizes': self.position_sizes,
            'leverage_levels': self.leverage_levels,
            'profit_targets': self.profit_targets,
            'volatility_threshold': self.volatility_threshold,
            'confidence_threshold': self.confidence_threshold,
            'expected_win_rate': self._get_expected_win_rate(),
            'max_drawdown_risk': self._get_max_drawdown_risk(),
            'warning': "‚ò¢Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–û–õ–ù–û–ô –ü–û–¢–ï–†–ò –ö–ê–ü–ò–¢–ê–õ–ê!"
        }
    
    def _get_target_monthly_return(self) -> float:
        """–¶–µ–ª–µ–≤–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        targets = {
            NuclearMode.FUSION: 2.00,      # 200% –≤ –º–µ—Å—è—Ü
            NuclearMode.FISSION: 5.00,     # 500% –≤ –º–µ—Å—è—Ü
            NuclearMode.ANTIMATTER: 10.00  # 1000% –≤ –º–µ—Å—è—Ü
        }
        return targets[self.nuclear_mode]
    
    def _get_expected_win_rate(self) -> float:
        """–û–∂–∏–¥–∞–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç –¥–ª—è —è–¥–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        rates = {
            NuclearMode.FUSION: 0.25,      # 25%
            NuclearMode.FISSION: 0.20,     # 20%
            NuclearMode.ANTIMATTER: 0.15   # 15%
        }
        return rates[self.nuclear_mode]
    
    def _get_max_drawdown_risk(self) -> float:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        risks = {
            NuclearMode.FUSION: 0.80,      # 80%
            NuclearMode.FISSION: 0.90,     # 90%
            NuclearMode.ANTIMATTER: 0.95   # 95%
        }
        return risks[self.nuclear_mode]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–¥–µ—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
fusion_engine = NuclearTradingEngine(NuclearMode.FUSION)
fission_engine = NuclearTradingEngine(NuclearMode.FISSION)
antimatter_engine = NuclearTradingEngine(NuclearMode.ANTIMATTER) 