import os
import logging
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000/api/v1")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Trading Bot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status, /latest_signal, /summary.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get(f"{API_BASE_URL}/")
        if resp.ok:
            data = resp.json()
            await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å API: {data.get('status', 'unknown')}")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ API.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.")

async def latest_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get(f"{API_BASE_URL}/signals/?limit=1")
        if resp.ok and resp.json().get('items'):
            signal = resp.json()['items'][0]
            msg = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal['signal_type']} –ø–æ {signal['asset_pair']}\n–¶–µ–Ω–∞: {signal['price_at_signal']}\n–í—Ä–µ–º—è: {signal['created_at']}"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–≤–æ–¥–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get(f"{API_BASE_URL}/news/?limit=3")
        if resp.ok and resp.json().get('items'):
            news_items = resp.json()['items']
            if not news_items:
                await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
                return
            for n in news_items:
                msg = f"üì∞ {n['title']}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {n.get('source', 'N/A')}\n–î–∞—Ç–∞: {n['published_at']}\n–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {n.get('sentiment_score', 'N/A')}\n{n.get('url', '')}"
                await update.message.reply_text(msg)
        else:
            await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.")

async def trades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get(f"{API_BASE_URL}/trades/?limit=3")
        if resp.ok and resp.json().get('items'):
            trades = resp.json()['items']
            if not trades:
                await update.message.reply_text("–ù–µ—Ç —Å–¥–µ–ª–æ–∫.")
                return
            for t in trades:
                msg = f"–°–¥–µ–ª–∫–∞ #{t['id']}\n–í—Ö–æ–¥: {t['entry_price']}\n–í—ã—Ö–æ–¥: {t.get('exit_price', 'N/A')}\n–û–±—ä—ë–º: {t['volume']}\nPnL: {t.get('pnl', 'N/A')}\n–°—Ç–∞—Ç—É—Å: {t['status']}\n–í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {t['entry_time']}"
                await update.message.reply_text(msg)
        else:
            await update.message.reply_text("–ù–µ—Ç —Å–¥–µ–ª–æ–∫.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("latest_signal", latest_signal))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("trades", trades))
    logger.info("Telegram bot started.")
    app.run_polling()

if __name__ == "__main__":
    main() 