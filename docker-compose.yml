services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading_bot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    command: redis-server --appendonly yes --requirepass redis_password_2025
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_bot_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password_2025@postgres:5432/trading_bot
      - REDIS_URL=redis://:redis_password_2025@redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  telegram_bot:
    build:
      context: .
      dockerfile: docker/telegram_bot.Dockerfile
    container_name: trading_bot_telegram
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password_2025@postgres:5432/trading_bot
      - REDIS_URL=redis://:redis_password_2025@redis:6379/0
      - BACKEND_URL=http://backend:8000
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_network
    depends_on:
      backend:
        condition: service_healthy

  # Frontend (React)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: trading_bot_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - trading_network
    depends_on:
      - backend

  # pgAdmin (опционально, для управления БД)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trading_bot_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tradingbot.local
      PGADMIN_DEFAULT_PASSWORD: admin_password_2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - trading_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  trading_network:
    driver: bridge 