# ===========================================
# üê≥ AI Trading Bot - Docker Launcher (Windows)
# ===========================================

Write-Host "üöÄ Starting AI Trading Bot Docker Stack..." -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] WARNING: $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] ERROR: $Message" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
try {
    docker --version | Out-Null
    Write-Log "‚úÖ Docker –Ω–∞–π–¥–µ–Ω"
} catch {
    Write-Error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –¥–ª—è Windows"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
try {
    docker compose version | Out-Null
    $dockerComposeCmd = "docker compose"
    Write-Log "‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω"
} catch {
    try {
        docker-compose --version | Out-Null
        $dockerComposeCmd = "docker-compose"
        Write-Log "‚úÖ Docker Compose (legacy) –Ω–∞–π–¥–µ–Ω"
    } catch {
        Write-Error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."

if (!(Test-Path "docker-compose.yml")) {
    Write-Error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
}

if (!(Test-Path "backend/Dockerfile")) {
    Write-Error "backend/Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
Write-Log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
New-Item -ItemType Directory -Force -Path "logs" | Out-Null
New-Item -ItemType Directory -Force -Path "database/init" | Out-Null

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
& $dockerComposeCmd down --remove-orphans 2>$null

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
$choice = Read-Host "üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã? (y/N)"
if ($choice -eq "y" -or $choice -eq "Y") {
    Write-Log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker system prune -f
    docker volume prune -f
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
Write-Log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

# –°–±–æ—Ä–∫–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º
Write-Log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
& $dockerComposeCmd build --no-cache --pull

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–Ω–∞—á–∞–ª–∞
Write-Log "–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (PostgreSQL, Redis)..."
& $dockerComposeCmd up -d postgres redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
Write-Log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
Start-Sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
for ($i = 1; $i -le 30; $i++) {
    try {
        docker exec trading_bot_postgres pg_isready -U trading_user -d trading_bot 2>$null | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
            break
        }
    } catch {}
    Write-Host "." -NoNewline
    Start-Sleep 2
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
Write-Log "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis..."
for ($i = 1; $i -le 15; $i++) {
    try {
        docker exec trading_bot_redis redis-cli ping 2>$null | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úÖ Redis –≥–æ—Ç–æ–≤"
            break
        }
    } catch {}
    Write-Host "." -NoNewline
    Start-Sleep 2
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
Write-Log "`n–ó–∞–ø—É—Å–∫ backend..."
& $dockerComposeCmd up -d backend

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
Write-Log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend API..."
Start-Sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è backend
Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è backend..."
for ($i = 1; $i -le 20; $i++) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Log "‚úÖ Backend API –≥–æ—Ç–æ–≤"
            break
        }
    } catch {}
    Write-Host "." -NoNewline
    Start-Sleep 3
}

# –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
Write-Log "`n–ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
& $dockerComposeCmd up -d

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
Start-Sleep 5
Write-Log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
& $dockerComposeCmd ps

Write-Host ""
Write-Log "üéâ AI Trading Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
Write-Host ""
Write-Host "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:" -ForegroundColor Blue
Write-Host "‚Ä¢ Backend API:    http://localhost:8000" -ForegroundColor Green
Write-Host "‚Ä¢ Health Check:   http://localhost:8000/health" -ForegroundColor Green
Write-Host "‚Ä¢ API Docs:       http://localhost:8000/docs" -ForegroundColor Green
Write-Host "‚Ä¢ Trading UI:     http://localhost:8000/trading-control" -ForegroundColor Green
Write-Host "‚Ä¢ Frontend:       http://localhost:3000" -ForegroundColor Green
Write-Host "‚Ä¢ pgAdmin:        http://localhost:8080" -ForegroundColor Green
Write-Host ""
Write-Host "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Blue
Write-Host "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:    $dockerComposeCmd logs -f" -ForegroundColor Yellow
Write-Host "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞:         $dockerComposeCmd down" -ForegroundColor Yellow
Write-Host "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:        $dockerComposeCmd restart" -ForegroundColor Yellow
Write-Host ""
Write-Log "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: $dockerComposeCmd logs -f" 